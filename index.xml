<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wyane`s Blog on Wyane`s Blog</title>
    <link>https://huaien.co/</link>
    <description>Recent content in Wyane`s Blog on Wyane`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 09 Oct 2019 16:36:29 +0900</lastBuildDate>
    <atom:link href="https://huaien.co/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo的LeaveIt主题优化记录四-修改行内代码样式与代码块重叠问题</title>
      <link>https://huaien.co/technology/hugo-leaveit-theme-modify-log-4/</link>
      <pubDate>Wed, 09 Oct 2019 16:36:29 +0900</pubDate>
      
      <guid>https://huaien.co/technology/hugo-leaveit-theme-modify-log-4/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;之前也提到过，本站用的是Hugo的LeaveIt主题。前几次也修改过一些内容。这次还是忍不住想改下代码高亮问题。因为我以前有些文章里的代码块没标注语言，如果你所有文章内的代码块都标注了语言，那就没有必要修改了。。&lt;/p&gt;

&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;

&lt;p&gt;LeaveIt主题使用的是Google code-prettify高亮代码。他是一款轻量级的代码高亮项目，虽然可能没highlight.js强大，不过还是够用的，而且小巧。不过在这个主题里存在一个问题，就是
&amp;gt; 主题中对代码块和行内代码添加了不同的样式。添加代码块时需要注明语言，行内代码则不需要。否则样式会重复。&lt;/p&gt;

&lt;p&gt;原行内代码样式
&lt;img src=&#34;https://ae01.alicdn.com/kf/H6568f1e53665402d91e8d0e361bed194U.jpg&#34; alt=&#34;原行内代码样式&#34; /&gt;&lt;/p&gt;

&lt;p&gt;原代码块样式
&lt;img src=&#34;https://ae01.alicdn.com/kf/Hfab02bf6e56c4f81a3953f23835190bef.jpg&#34; alt=&#34;原代码块样式&#34; /&gt;&lt;/p&gt;

&lt;p&gt;样式重复的样子&lt;/p&gt;

&lt;p&gt;由于我修复前忘记截图了，所以可以脑补下。。&lt;/p&gt;

&lt;p&gt;虽然作者说了
&amp;gt; 如果你之前写代码块都没有标语言，你又不需要行内代码高亮，你可以删除assts/css/_page/post.scss中code:not([class])的样式。&lt;/p&gt;

&lt;p&gt;但是我觉得删除了行内代码样式，感觉会怪怪的。本想试试能不能修改成不重复。但是搞了一个上午没弄成自己想要的结果。&lt;/p&gt;

&lt;p&gt;在这之前也尝试了prismjs，我挺喜欢它的第三方主题 &lt;a href=&#34;https://github.com/PrismJS/prism-themes/blob/master/themes/prism-hopscotch.css&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;prism-hopscotch&lt;/a&gt;
它长这个样子：
&lt;img src=&#34;https://github.com/PrismJS/prism-themes/raw/master/screenshots/prism-hopscotch.png&#34; alt=&#34;hopscotch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;就想着把LeaveIt主题的代码高亮换成prismjs，但是发现如果要支持比较多语言和显示行号等，js的体积就比较大，最后还是放弃了。&lt;/p&gt;

&lt;p&gt;最后就像能不能把原来的code-prettify样式改为上图的样式。再通过把行内样式的背景改为和代码块一样的背景色就可以解决行内代码样式和代码块样式重复问题了。&lt;/p&gt;

&lt;p&gt;因为原来的样式重复就是黑色的代码块背景和白色的行内代码背景色重复了。显得非常明显。。&lt;/p&gt;

&lt;h1 id=&#34;修改代码&#34;&gt;修改代码&lt;/h1&gt;

&lt;p&gt;打开&lt;code&gt;/LeaveIt/assets/css/_common/_page/post.scss&lt;/code&gt;
将原来的第86行起的以下内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;        code,
        pre {
            padding: 7px;
            font-size: 13px;
            font-family: Consolas, Monaco, Menlo, Consolas, monospace;
            word-break: break-all;
            word-wrap: break-word;
        }

        code:not([class]) {
            padding: 5px 5px;
            background: #fff;
            border: 1px solid #ddd;
            box-shadow: 1px 1px 0 #fff, 2px 2px 0 #ddd;
            margin-left: 3px;
            margin-right: 3px;

            .dark-theme &amp;amp;:not([class]) {
                background: transparent;
                box-shadow: 1px 1px 0 $dark-font-secondary-color, 2px 2px 0 $dark-font-secondary-color;
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;        code,
        pre {
            color: #ffffff;
            font-family: &amp;quot;Fira Mono&amp;quot;, Menlo, Monaco, &amp;quot;Lucida Console&amp;quot;,&amp;quot;Courier New&amp;quot;, Courier, monospace;
            font-size: 16px;
            line-height: 1.375;
            direction: ltr;
            text-align: left;
            word-spacing: normal;
			padding: 5px 3px;

            hyphens: none;
            white-space: pre;
            white-space: pre-wrap;
            background: #322931;
            color: #b9b5b8;
			border-radius: 5px;
            word-break: break-all;
            word-wrap: break-word;
        }


       code:not([class]) {
			font-family: &amp;quot;Fira Mono&amp;quot;, Menlo, Monaco, &amp;quot;Lucida Console&amp;quot;,&amp;quot;Courier New&amp;quot;, Courier, monospace;
            padding: 2px 4px;
            background: #322931;
            color: #b9b5b8;
            border-radius: 3px;
            margin-left: 3px;
            margin-right: 3px;
            
            .dark-theme &amp;amp;:not([class]) {
                background: #2d2d2d;
                color: #e06c75;
            }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这部分样式其实就是从prismjs的&lt;a href=&#34;https://github.com/PrismJS/prism-themes/blob/master/themes/prism-hopscotch.css&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;prism-hopscotch&lt;/a&gt;样式 修改来的。&lt;/p&gt;

&lt;h1 id=&#34;效果&#34;&gt;效果&lt;/h1&gt;

&lt;p&gt;行内代码背景和没有指定语言的代码块背景一致，这样就不会出现没有指定语言的代码块样式和行内代码样式重复了。
&lt;img src=&#34;https://ae01.alicdn.com/kf/H22d9fbedcaec40d598cd957b8b42d890t.jpg&#34; alt=&#34;行内代码背景和代码块背景一致&#34; /&gt;
查看源代码可以看到这个代码块没有指定语言。
&lt;img src=&#34;https://ae01.alicdn.com/kf/H388ad007bd4948abad10856718a29cc6u.jpg&#34; alt=&#34;代码块没有指定语言&#34; /&gt;&lt;/p&gt;

&lt;p&gt;样式这东西是个人喜好，我也是避免麻烦就直接改成一样了。如果你不想行内代码和代码块背景一样那就得用其他办法了。&lt;/p&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yyqx.online/posts/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;代码高亮&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.hgtweb.com/2019/code-csdn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;修改LeaveIt中的行内code样式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>移动设备适合性报告：网页不适合在移动设备上浏览的问题</title>
      <link>https://huaien.co/technology/google-mobile-friendly/</link>
      <pubDate>Sun, 06 Oct 2019 16:22:06 +0900</pubDate>
      
      <guid>https://huaien.co/technology/google-mobile-friendly/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;这个问题困扰了很久，不过一直没去研究。因为虽然报告提示有问题，但是每次我自己用手机端打开该网页均显示正常。。今天就查了查资料，原来搜索引擎被阻止读取相关资源，所以无法正常显示。&lt;/p&gt;

&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;

&lt;p&gt;当用谷歌搜索我的博客的时候，出现的结果下方会提示
&amp;gt; 您的网页不适合在移动设备上浏览。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hcd36a0e85a854515b826b74385e399b7G.jpg&#34; alt=&#34;Google搜索结果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然这只有我能看到。因为登录了Google Search Console。&lt;/p&gt;

&lt;p&gt;点击这个提示语，可以进入到移动设备适合性报告。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H9bcf7e818a2145fbaceb431c18731790f.jpg&#34; alt=&#34;移动设备适合性报告内容&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从这里可以看到，总的问题就是“网页不适合在移动设备上浏览。”下面列出了三点详细问题：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;文字太小，无法阅读&lt;/li&gt;
&lt;li&gt;可点击元素之间的距离太近&lt;/li&gt;
&lt;li&gt;内容宽度超过了屏幕显示范围&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;的确从右边的Googlebot智能手机版模拟出来的显示效果可以看到的确显示的一塌糊涂。。。
&lt;img src=&#34;https://ae01.alicdn.com/kf/H6c1a8c79ca654831b1154d14b1b105e68.jpg&#34; alt=&#34;Googlebot智能手机版模拟出来的显示效果&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;解决问题&#34;&gt;解决问题&lt;/h1&gt;

&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;一开始不理解为什么会出现这个问题呢？
因为自己用手机浏览没出现这个问题，只有之前有注意到过&lt;a href=&#34;https://huaien.co/technology/hugo-leaveit-theme-url-warp-problem/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;文章内的URL过长无法换行&lt;/a&gt;可能导致了“内容宽度超过了屏幕显示范围”，但是我已经修复了这个问题。不过这个适合性报告还是现实宽度超过屏幕显示范围。所以就很不解。&lt;/p&gt;

&lt;p&gt;在找解决办法的时候，注意到移动设备适合性报告的测试结果下面有个“网页加载问题”，可以点击查看详情。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hbc751a7bec9442a09f177328f24761c5V.jpg&#34; alt=&#34;网页加载问题详情&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H6e92debb015c488e9813e1f857e83cd1w.jpg&#34; alt=&#34;网页加载问题详情&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到的是，里面提示了“有 10 项网页资源未能成功加载”，本来我还以为是因为某些cdn资源失效了导致这样。但是一看不对啊，原来是我禁止了搜索引擎爬取我的样式或者脚本。。。也不知道是什么时候改的。。&lt;/p&gt;

&lt;p&gt;接着就去确认下robots.txt。
本站用的是Hugo，Hugo的robots.txt一般在下面的位置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/layouts/robots.txt
/themes/&amp;lt;THEME&amp;gt;/layouts/robots.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我用的LeaveIt主题，在&lt;code&gt;/themes/LeaveIt/layouts/robots.txt&lt;/code&gt;找到了该文件。&lt;/p&gt;

&lt;p&gt;一看的确是禁止了相关资源的读取。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;User-agent: *

Disallow: /images/
Disallow: /js/
Disallow: /css/

User-agent: MJ12bot
Disallow: /

User-agent: AhrefsBot
Disallow: /

User-agent: BLEXBot
Disallow: /

# Block SISTRIX
User-agent: SISTRIX Crawler
Disallow: /
User-agent: sistrix
Disallow: /
User-agent: 007ac9
Disallow: /
User-agent: 007ac9 Crawler
Disallow: /

# Block Uptime robot
User-agent: UptimeRobot/2.0
Disallow: /

# Block Ezooms Robot
User-agent: Ezooms Robot
Disallow: /

# Block Perl LWP
User-agent: Perl LWP
Disallow: /

# Block netEstate NE Crawler (+http://www.website-datenbank.de/)
User-agent: netEstate NE Crawler (+http://www.website-datenbank.de/)
Disallow: /

# Block WiseGuys Robot
User-agent: WiseGuys Robot
Disallow: /

# Block Turnitin Robot
User-agent: Turnitin Robot
Disallow: /

# Block Heritrix
User-agent: Heritrix
Disallow: /

# Block pricepi
User-agent: pimonster
Disallow: /
User-agent: Pimonster
Disallow: /

User-agent: SurdotlyBot
Disallow: /

User-agent: ZoominfoBot
Disallow: /

Sitemap: {{ &amp;quot;sitemap.xml&amp;quot; | absLangURL }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;办法&#34;&gt;办法&lt;/h2&gt;

&lt;h3 id=&#34;修改robots-txt&#34;&gt;修改robots.txt&lt;/h3&gt;

&lt;p&gt;修改为允许搜索引擎爬取相关资源。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;User-agent: *

Sitemap: {{ &amp;quot;sitemap.xml&amp;quot; | absLangURL }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用Hugo重新生成网页，部署到github和coding。&lt;/p&gt;

&lt;h3 id=&#34;验证结果&#34;&gt;验证结果&lt;/h3&gt;

&lt;p&gt;部署成功后，再去Google的移动设备适合性测试网页重新测试下刚才的网页还存在问题吗。
&lt;img src=&#34;https://ae01.alicdn.com/kf/He13ac111b4804fa993f96038ffb5997fs.jpg&#34; alt=&#34;移动设备适合性报告&#34; /&gt;
就可以看到大大绿色的字提示&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“网页适合在移动设备上浏览”&lt;/p&gt;

&lt;p&gt;“此网页在移动设备上易于浏览”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;右边的模拟浏览也显示的比较正常，虽然还存在网页加载问题，但是看了下基本是广告的robots.txt设置和一些图片和第三方js资源的重定向问题等等，并不影响页面的构成。&lt;/p&gt;

&lt;h3 id=&#34;gsc验证修复&#34;&gt;GSC验证修复&lt;/h3&gt;

&lt;p&gt;接着再去Google Search Console 的&lt;a href=&#34;https://search.google.com/search-console/mobile-usability&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;移动设备易用性&lt;/a&gt;看了下，存在大概24个以上3个问题的页面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H3b6f682779174ed6b60cab0d47faf514I.jpg&#34; alt=&#34;移动设备易用性&#34; /&gt;&lt;/p&gt;

&lt;p&gt;要解决这个问题的话就要告诉Google我更新了robots.txt，让爬虫再去爬一遍。&lt;/p&gt;

&lt;p&gt;点击上图中的验证那一栏的未启动。可以看到有
验证修复的按钮，&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H4f6ea3f796f148979e2874c8c69d4a08I.jpg&#34; alt=&#34;验证修复&#34; /&gt;&lt;/p&gt;

&lt;p&gt;就会开始 “正在进行快速初始验证”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hd5a27311d7244aae8ef91d62b92ebcb3p.jpg&#34; alt=&#34;正在进行快速初始验证&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后会告诉你验证已经开始，请等待。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H973c934641394cfbb123af3f091924b1Y.jpg&#34; alt=&#34;验证已经开始&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其他两个错误也是用上面这个办法来验证修复就可以了。&lt;/p&gt;

&lt;h3 id=&#34;gsc提交robots-txt&#34;&gt;GSC提交robots.txt&lt;/h3&gt;

&lt;p&gt;由于现在新版Google Search Console移除了“robots.txt 测试工具”的入口，可以从下面的入口进入。
&lt;a href=&#34;https://www.google.com/webmasters/tools/robots-testing-tool?utm_source=support.google.com/webmasters/&amp;amp;utm_medium=referral&amp;amp;utm_campaign=%206062598&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;打开“robots.txt 测试工具”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Ha0fb8ef8eaab4452b16ac458d3b8d04cE.jpg&#34; alt=&#34;robots.txt 测试工具&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果框中显示的是你修改过的最新的robots.txt就说明修改的有生效。可以点击提交重新提交一次。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hb3afcc6487b442d7be12164c3289e8f0i.jpg&#34; alt=&#34;提交robots.txt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;不放心的话可以在最下面的栏中测试下原来有问题的资源是否还被阻止访问。&lt;/p&gt;

&lt;h3 id=&#34;提交sitemap&#34;&gt;提交sitemap&lt;/h3&gt;

&lt;p&gt;最后也可以再去提交一下sitemap（站点地图）给Google。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H9f06051b371c419998cbd6c5f0ae60e8X.jpg&#34; alt=&#34;提交sitemap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后就是等Google搜索引擎更新你的搜索结果了。
解决了被阻止访问相关资源，就不会被降低网站排名。&lt;/p&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/webmasters/answer/9063469?hl=zh-Hans&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;“移动设备易用性”报告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/webmasters/answer/6062608?hl=zh-Hans&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;robots.txt 文件简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/webmasters/answer/6062598?hl=zh-Hans&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;使用 robots.txt 测试工具测试 robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/robots/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Robots.txt File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>如何导出Putty的Sessions配置到其他电脑</title>
      <link>https://huaien.co/technology/export-putty-sessions/</link>
      <pubDate>Sat, 05 Oct 2019 13:43:56 +0900</pubDate>
      
      <guid>https://huaien.co/technology/export-putty-sessions/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;运维人员应该都知道，PuTTY是一款免费开源的SSH远程客户端，它的体积很小，甚至无需安装。
但是如果想要在多台电脑中用一个putty的session配置，就需要导出导入它的配置。但是Putty本身不自带导出导入功能。不过我们可以用Windows的注册表来导出Putty的session配置。&lt;/p&gt;

&lt;h1 id=&#34;导出方法&#34;&gt;导出方法&lt;/h1&gt;

&lt;h2 id=&#34;注册表&#34;&gt;注册表&lt;/h2&gt;

&lt;p&gt;可以用regedit导出，在命令行下运行regedit找到 &lt;code&gt;[HKEY_CURRENT_USER\Software\SimonTatham\PuTTY]&lt;/code&gt;右键导出
这样操作有点麻烦，需要去找注册表目录&lt;/p&gt;

&lt;h2 id=&#34;命令行&#34;&gt;命令行&lt;/h2&gt;

&lt;p&gt;也可以直接通过命令行来导出。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;reg export HKEY_CURRENT_USER\Software\SimonTatham\PuTTY putty.reg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;未指定文件目录时，导出的注册表信息默认是在用户目录下，需要指定目录时：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;reg export HKEY_CURRENT_USER\Software\SimonTatham\PuTTY d://putty.reg
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;导入方法&#34;&gt;导入方法&lt;/h1&gt;

&lt;p&gt;将导出的putty.reg文件复制到新的电脑中，双击它导入注册表即可。&lt;/p&gt;

&lt;h1 id=&#34;参考来源&#34;&gt;参考来源&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.qizhan100.com/article_67.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;putty导出session配置&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo的LeaveIt主题优化记录三-修复文章内URL无法改行问题</title>
      <link>https://huaien.co/technology/hugo-leaveit-theme-url-warp-problem/</link>
      <pubDate>Fri, 04 Oct 2019 16:53:05 +0900</pubDate>
      
      <guid>https://huaien.co/technology/hugo-leaveit-theme-url-warp-problem/</guid>
      <description>&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;

&lt;h2 id=&#34;文内长url手机端显示问题&#34;&gt;文内长URL手机端显示问题&lt;/h2&gt;

&lt;p&gt;修复文章内长URL在手机端无法自动换行导致页面自适应错误。&lt;/p&gt;

&lt;h1 id=&#34;效果&#34;&gt;效果&lt;/h1&gt;

&lt;h2 id=&#34;修复前&#34;&gt;修复前&lt;/h2&gt;

&lt;p&gt;以下是在iPhone X上的显示效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hda2a7734ce3f4b8c9463c18685e948b5t.jpg&#34; alt=&#34;手机端修改前的显示&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hd9296ab5f06043219ac6c493ad3eb909v.jpg&#34; alt=&#34;手机端修改前的显示效果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到原来的主题在文章内有较长的链接的时候，在手机端浏览时无法换行，将页面撑大，导致自适应失败。&lt;/p&gt;

&lt;h2 id=&#34;修复后&#34;&gt;修复后&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Ha8a453c4f40b4166a017d689a6f5b709s.jpg&#34; alt=&#34;手机端修复后的显示效果&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;原因&#34;&gt;原因&lt;/h1&gt;

&lt;p&gt;查看了下是文章页样式表的文章内容&lt;code&gt;.post-content&lt;/code&gt;代码块缺少换行的属性。
作者可能忘记考虑到长URL的换行问题，还是把那两行换行代码加到下面的代码块去了，导致URL没有自动换行。&lt;/p&gt;

&lt;h1 id=&#34;修复办法&#34;&gt;修复办法&lt;/h1&gt;

&lt;p&gt;打开主题目录下的&lt;code&gt;/LeaveIt/assets/css/_common/_page/post.scss&lt;/code&gt; 文件，也就是文章页的样式表。
大概在第40行，找到&lt;code&gt;.post-content&lt;/code&gt;代码块 在里面添加下面的代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;		word-break: break-all;
		word-wrap: break-word;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加后的&lt;code&gt;.post-content&lt;/code&gt;代码块如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    .post-content {
        padding-top: 2rem;
		word-break: break-all;
		word-wrap: break-word;

        h2,
        h3,
        h4,
        h5,
        h6 {
            padding-top: .8em;
            padding-bottom: .3em;
        }
/* 下面省略 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实加的代码就是把原来的&lt;code&gt;pre&lt;/code&gt;代码块的内容复制过来的。&lt;/p&gt;

&lt;h1 id=&#34;延伸&#34;&gt;延伸&lt;/h1&gt;

&lt;h2 id=&#34;word-break&#34;&gt;word-break&lt;/h2&gt;

&lt;p&gt;CSS 属性 word-break 指定了怎样在单词内断行。&lt;/p&gt;

&lt;p&gt;这个属性有下面三个值。
- &lt;code&gt;normal&lt;/code&gt;   使用默认的断行规则。
- &lt;code&gt;break-all&lt;/code&gt;  对于non-CJK (CJK 指中文/日文/韩文) 文本，可在任意字符间断行。
- &lt;code&gt;keep-all&lt;/code&gt;  CJK 文本不断行。 Non-CJK 文本表现同 normal。&lt;/p&gt;

&lt;p&gt;可以查看&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-break&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;MDN Web文档&lt;/a&gt;来看以上的区别。&lt;/p&gt;

&lt;h2 id=&#34;word-warp&#34;&gt;word-warp&lt;/h2&gt;

&lt;p&gt;CSS 属性 overflow-wrap 是用来说明当一个不能被分开的字符串太长而不能填充其包裹盒时，为防止其溢出，浏览器是否允许这样的单词中断换行。&lt;/p&gt;

&lt;p&gt;引用MDN Web文档的话
&amp;gt; 注：word-wrap 属性原本属于微软的一个私有属性，在 CSS3 现在的文本规范草案中已经被重名为 overflow-wrap 。 word-wrap 现在被当作 overflow-wrap 的 “别名”。 稳定的谷歌 Chrome 和 Opera 浏览器版本支持这种新语法。&lt;/p&gt;

&lt;p&gt;这个属性有两个值
- &lt;code&gt;normal&lt;/code&gt;  表示在正常的单词结束处换行。
- &lt;code&gt;break-word&lt;/code&gt;  表示如果行内没有多余的地方容纳该单词到结尾，则那些正常的不能被分割的单词会被强制分割换行。&lt;/p&gt;

&lt;h2 id=&#34;区别&#34;&gt;区别&lt;/h2&gt;

&lt;p&gt;有些童鞋可能会搞混了这两个属性。其实w&lt;code&gt;ord-break&lt;/code&gt;就是“控制单词如何被拆分换行”。&lt;code&gt;word-wrap&lt;/code&gt;（&lt;code&gt;overflow-wrap&lt;/code&gt;）就是“控制长度超过一行的单词是否被拆分换行”。&lt;/p&gt;

&lt;p&gt;其实还有个&lt;code&gt;white-space&lt;/code&gt;，由于这里没有用到所以就没提到了，以上只是来自 &lt;a href=&#34;https://juejin.im/post/5b8905456fb9a01a105966b4&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;彻底搞懂word-break、word-wrap、white-space&lt;/a&gt;
，有兴趣的可以看看这里，讲的比较详细。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>修改AdSense自适应广告尺寸 不同宽度屏幕指定不同尺寸广告</title>
      <link>https://huaien.co/technology/modify-google-adsense-auto-style/</link>
      <pubDate>Thu, 03 Oct 2019 04:50:16 +0000</pubDate>
      
      <guid>https://huaien.co/technology/modify-google-adsense-auto-style/</guid>
      <description>

&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;个人也是比较反感那些不美观的广告，但是适当利用Google广告的话可以给网站添加一点内容，个人觉得还是挺好的。虽然Google Adsense 提供了自适应广告尺寸。但是有时候适配的尺寸并不是你想要的尺寸。比如本博客的下方有个横幅广告，考虑到用固定尺寸的横幅广告会导致手机端的显示太大，不美观。试过了自适应广告尺寸，效果是移动端的显示也是正方形方块广告，但是我想要的是高度比较小的横幅广告，只要一小块的长方形广告会比较美观。这篇文章记录了如何将自适应广告代码修改为不同屏幕大小显示指定尺寸。&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h1 id=&#34;效果&#34;&gt;效果&lt;/h1&gt;

&lt;p&gt;下面是本博客的评论框上方的长方形广告。根据不同屏幕宽度显示不同高度尺寸，宽度基本为根据屏幕大小自动拉伸。&lt;/p&gt;

&lt;h2 id=&#34;电脑端显示效果&#34;&gt;电脑端显示效果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hc88ab47c72984960b4b91925619a5f3cg.jpg&#34; alt=&#34;电脑端显示效果&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ipad端显示效果&#34;&gt;iPad端显示效果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Heba58630eeb741a5a90598f4821d1488M.jpg&#34; alt=&#34;iPad端显示效果&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;手机端显示效果&#34;&gt;手机端显示效果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hf47aa3c8030e4a6bb77c93fac699d910U.jpg&#34; alt=&#34;手机端显示效果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，根据不同屏幕大小，广告尺寸会自动适配宽度和指定高度。原来的代码会导致是一块正方形广告，感觉在手机端等比较小的屏幕上占用屏幕太大，影响体验。&lt;/p&gt;

&lt;h1 id=&#34;代码&#34;&gt;代码&lt;/h1&gt;

&lt;h2 id=&#34;谷歌官方修改代码&#34;&gt;谷歌官方修改代码&lt;/h2&gt;

&lt;p&gt;这里贴上Google官方修改后的自适应广告代码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;style&amp;gt;
.example_responsive_1 { width: 320px; height: 100px; }
@media(min-width: 500px) { .example_responsive_1 { width: 468px; height: 60px; } }
@media(min-width: 800px) { .example_responsive_1 { width: 728px; height: 90px; } }
&amp;lt;/style&amp;gt;
&amp;lt;script async src=&amp;quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- example_responsive_1 --&amp;gt;
&amp;lt;ins class=&amp;quot;adsbygoogle example_responsive_1&amp;quot;
     style=&amp;quot;display:inline-block&amp;quot;
     data-ad-client=&amp;quot;ca-pub-XXXXXXX11XXX9&amp;quot;
     data-ad-slot=&amp;quot;8XXXXX1&amp;quot;&amp;gt;&amp;lt;/ins&amp;gt;
&amp;lt;script&amp;gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;宽度不超过 500 像素的屏幕：320x100 广告单元。&lt;/li&gt;
&lt;li&gt;宽度在 500 像素到 799 像素之间的屏幕：468x60 广告单元。&lt;/li&gt;
&lt;li&gt;宽度在 800 像素以上的屏幕：728x90 广告单元。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;本博客修改后代码&#34;&gt;本博客修改后代码&lt;/h2&gt;

&lt;p&gt;这里附上本博客用的代码，就是Google发布的代码再根据自己的实际情况修改。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div align=&amp;quot;center&amp;quot;&amp;gt;
&amp;lt;style&amp;gt;
.adsbygoogle-comment { width: 99%; height: 60px; padding: 1rem 0px }
@media(min-width: 500px) { .adsbygoogle-comment { width: 99%; height: 70px; padding: 1rem 0px} }
@media(min-width: 800px) { .adsbygoogle-comment { width: 99%; height: 90px; padding: 1rem 0px} }
&amp;lt;/style&amp;gt; 
&amp;lt;script async src=&amp;quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;!-- Wyane&#39;s Blog 长方形 --&amp;gt;

&amp;lt;ins class=&amp;quot;adsbygoogle adsbygoogle-comment&amp;quot;
     style=&amp;quot;display:inline-block&amp;quot;
     data-ad-client=&amp;quot;ca-pub-xxxxxxxxxxxxxxxxxx&amp;quot;
     data-ad-slot=&amp;quot;xxxxxxxxxx&amp;quot;&amp;gt;&amp;lt;/ins&amp;gt;
&amp;lt;script&amp;gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&amp;lt;/script&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解释&#34;&gt;解释&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;宽度不超过 500 像素的屏幕：宽度为根据屏幕实际宽度自动调整为99%的宽度，高度固定为60px的广告单元 上下内边距1rem。&lt;/li&gt;
&lt;li&gt;宽度在 500 像素到 799 像素之间的屏幕：宽度为根据屏幕实际宽度自动调整为99%的宽度，高度固定为70px的广告单元 上下内边距1rem。&lt;/li&gt;
&lt;li&gt;宽度在 800 像素以上的屏幕：宽度为根据屏幕实际宽度自动调整为99%的宽度，高度固定为90px的广告单元 上下内边距1rem。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adsbygoogle-comment&lt;/code&gt;为样式名，可以自定义，需要和 &lt;code&gt;&amp;lt;ins class=&amp;quot;adsbygoogle adsbygoogle-comment&amp;quot;&lt;/code&gt; 对应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-ad-client=&amp;quot;ca-pub-xxxxxxxxxxxxxxxxxx&amp;quot;&lt;/code&gt;的&lt;code&gt;ca-pub-xxxxxxxxxxxxxxxxxx&lt;/code&gt;为你自己的发布商ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-ad-slot=&amp;quot;xxxxxxxxxx&amp;quot;&lt;/code&gt;的&lt;code&gt;xxxxxxxxxx&lt;/code&gt;为你自己的广告单元ID&lt;/li&gt;
&lt;li&gt;以上地方根据自己需求修改。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果还有不懂的地方可以参考下面的官方解释。
注意：Google AdSense原则上不允许修改广告代码，官方好像只允许这种通过css样式的方法来修改自适应广告尺寸。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在您的 AdSense 帐号中创建一个展示广告单元，确保“广告尺寸”部分中的自适应选项保持选中状态。记下自适应广告代码中的以下信息：
发布商 ID，例如 ca-pub-1234567891234567
广告单元 ID (data-ad-slot)，例如 1234567890。
在示例代码中：
将所有 example_responsive_1 实例都替换为唯一名称，例如 Home_Page、front_page_123 等。
注意事项：
您的唯一名称只能包含英文字母 (A-Z)、数字和下划线，且第一个字符必须是英文字母。
您每次调整此示例代码时都必须使用不同的唯一名称。
将 ca-pub-XXXXXXX11XXX9 替换为您自己的发布商 ID。
将 8XXXXX1 替换为您自己的广告单元 ID。
决定您希望广告单元在每类屏幕宽度上占据的尺寸：
如果您希望采用示例代码中现有的广告单元尺寸，则不需要做出任何额外更改。
如果您希望根据具体屏幕尺寸设置不同的广告单元尺寸，请在示例代码中进行以下操作：
将 320px 和 100px 替换为您希望为宽度不超过 500 像素的屏幕使用的广告单元的宽度和高度。
将 468px 和 60px 替换为您希望为宽度在 500 像素和 799 像素之间的屏幕使用的广告单元的宽度和高度。
将 728px 和 90px 替换为您希望为宽度超过 800 像素的屏幕使用的广告单元的宽度和高度。
复制修改后的广告代码，并将其粘贴到您希望展示广告的网页的 HTML 源代码中。
注意：放置广告代码后，我们建议您在不同的设备和屏幕上测试您的广告，确保自适应功能正常工作。
自适应广告代码高级功能示例
如果您发现我们的自适应广告代码无法满足您的所有需求，则不妨修改广告代码，通过 CSS 指定广告单元的确切尺寸。&lt;/p&gt;

&lt;p&gt;注意：除非您对修改广告代码非常有把握，否则我们不建议您使用这些高级功能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;参考来源&#34;&gt;参考来源&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/adsense/answer/9183363?hl=zh-Hans&amp;amp;visit_id=636989514276087628-3394097392&amp;amp;rd=1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;如何修改自适应广告代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tumutanzi.com/archives/12509&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;修改AdSense自适应广告尺寸提高点击率技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>好看喜欢的免费与收费typecho主题收藏</title>
      <link>https://huaien.co/internet/favorite-great-typecho-themes/</link>
      <pubDate>Wed, 02 Oct 2019 06:03:21 +0000</pubDate>
      
      <guid>https://huaien.co/internet/favorite-great-typecho-themes/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;因为本人也在用typecho搭建博客，typecho的主题没有wordpress多，但是很多国内大佬做的主题是真心喜欢，本人收藏的多为简洁又好看的主题。&lt;/p&gt;

&lt;p&gt;有遇到好看的随时更新，如果有作者觉得侵犯了您的权益，请告知我。我会及时删除。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;免费版提供下载地址或者github地址，收费版请到作者页面购买。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;主题&#34;&gt;主题&lt;/h1&gt;

&lt;h2 id=&#34;免费版&#34;&gt;免费版&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Initial&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作者&lt;/strong&gt;：&lt;a href=&#34;https://www.offodd.com/17.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;孙杰&lt;/a&gt; （OFFODD）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当前版本&lt;/strong&gt;：2019/2/20:更新2.4.3版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预览地址&lt;/strong&gt;：&lt;a href=&#34;https://www.offodd.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;OFFODD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预览图&lt;/strong&gt;：&lt;img src=&#34;https://ae01.alicdn.com/kf/H1d715be23a98442faa3a9d958771c2b2a.jpg&#34; alt=&#34;作者博客&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub项目地址&lt;/strong&gt;: &lt;a href=&#34;https://github.com/jielive/initial&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Initial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;收藏理由&lt;/strong&gt;：轻量级设计，极速浏览体验，全站Pjax、Ajax评论、Ajax翻页、HTML压缩、CSS文件压缩，支持“轻语”功能（类似说说）等等，感觉都是收费主题的级别了。。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;收费版&#34;&gt;收费版&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;handsome&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作者&lt;/strong&gt;：&lt;a href=&#34;https://www.ihewro.com/archives/489/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;友人C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当前版本&lt;/strong&gt;：5.3.0 2019/10/04当前&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;价格&lt;/strong&gt;：55元（限时优惠）2019/10/04当前&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预览地址&lt;/strong&gt;：&lt;a href=&#34;https://www.ihewro.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;友人C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预览图&lt;/strong&gt;：&lt;img src=&#34;https://assets.ihewro.com/usr/uploads/2019/09/391386371.png&#34; alt=&#34;作者博客&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;购买地址&lt;/strong&gt;: &lt;a href=&#34;https://www.ihewro.com/archives/489/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;友人C官方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;收藏理由&lt;/strong&gt;：作者太良心了，价格真心便宜。估计是typecho最火主题了吧，看到大部分人都持有，由于用了hugo这个博客程序，想回头都难，所以暂时没有入手。超多功能，界面精美。Pjax全站无刷新页面体验，内置音乐播放器，时光机，可选私密，相册等等一大堆特性。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>记录docker的Debian下搭建Django框架开发的仿zhuye.kim导航</title>
      <link>https://huaien.co/technology/debian-install-zhuye-kim/</link>
      <pubDate>Tue, 01 Oct 2019 16:14:12 +0000</pubDate>
      
      <guid>https://huaien.co/technology/debian-install-zhuye-kim/</guid>
      <description>&lt;p&gt;先祝祖国70华诞生日快乐！&lt;/p&gt;

&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;zhuye.kim这个网页导航估计站长的话很熟悉了。一个简洁漂亮的网页导航。不过作者没有开放源码，所以没有机会试一试，但是有hostloc上的大佬用python＋Django仿了一个。可以来试试看，顺便学下Python和Django，之前昆哥一直给我推荐Django这个框架。
记录本次的折腾，主要是因为这个程序的官方还有moerats只写了centos的教程。因为我最近玩docker，就想用昨天docker拉取的Debian系统下搭建试试看。其实区别的话无非就是两个OS的命令 yum 和 apt-get的区别吧。。虽然如此还是记录一下。
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h1 id=&#34;环境要求&#34;&gt;环境要求&lt;/h1&gt;

&lt;p&gt;官方要求是下面这样&lt;br /&gt;
&lt;code&gt;Centos7 + Python3 + MySQL + Django1.8.x-2.0.x&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这次我用的下面的环境&lt;br /&gt;
&lt;code&gt;debian(docker镜像版 + Python3.7 + MySQL5.6 + Django1.8.x-2.0.x)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;准备工作&#34;&gt;准备工作&lt;/h1&gt;

&lt;p&gt;既然知道了所需环境，那就各个安装了就好。
Debian的话这里用的是昨天docker拉取的Debian镜像。相关教程可以查看&lt;a href=&#34;https://huaien.co/technology/docker-install-bt-panel/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;由于昨天的Debian也直接安装了宝塔面板，直接面板里安装了mysql5.6，所以mysql也有了。&lt;/p&gt;

&lt;p&gt;接下来就安装下python3.7&lt;/p&gt;

&lt;p&gt;我们先从docker进去Debian系统容器&lt;/p&gt;

&lt;p&gt;先看下正在运行的容器ID&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@instance:/home/ubuntu# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                                                                                              NAMES
e27df07f4a6d        debian              &amp;quot;bash&amp;quot;              30 hours ago        Up 6 hours          0.0.0.0:20-21-&amp;gt;20-21/tcp, 0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp, 0.0.0.0:888-&amp;gt;888/tcp, 0.0.0.0:8888-&amp;gt;8888/tcp   baota
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果容器没有在运行就会出现下面这样&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@instance:/home/ubuntu# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们需要先运行一下容器。&lt;/p&gt;

&lt;p&gt;查看下容器的ID或者说是有什么容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@instance:/home/ubuntu# docker ps --all
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES
e27df07f4a6d        debian              &amp;quot;bash&amp;quot;              30 hours ago        Exited (0) About a minute ago                       baota
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;知道了有个名字是“baota” ID为“e27df07f4a6d”的容器。&lt;/p&gt;

&lt;p&gt;那我们就运行它，用ID也可以。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@instance-20190921-1119:/home/ubuntu# docker start baota
baota
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动后通过下面命令来进入正在运行的容器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@instance:/home/ubuntu# docker attach baota
root@e27df07f4a6d:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就在昨天搭建的Debian镜像容器里了。就是在debian的环境下操作了。&lt;/p&gt;

&lt;h2 id=&#34;安装python3&#34;&gt;安装python3&lt;/h2&gt;

&lt;p&gt;进入后你可以先用&lt;code&gt;python3 --version&lt;/code&gt; 看下有没有python3，如果提示没有该命令的话就是没有安装，我的这个Debian系统是没有自带python3 的，所以需要自己安装。&lt;/p&gt;

&lt;p&gt;我是用系统自带package包安装的，所以需要先更新下软件库。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@e27df07f4a6d:/# apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;成功后接着安装python3&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@e27df07f4a6d:/# apt-get install python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后软件库就会自动安装好最新版的python3，这里装了python3.7.3-1。&lt;/p&gt;

&lt;p&gt;没有python3，自然也没有pip3，所以如果直接用
&lt;code&gt;apt-get install pip&lt;/code&gt;安装的是pip2不支持python3，所以要用下面的命令来安装就可以了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get install python3-pip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成后可以查看下版本确认下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@e27df07f4a6d:/# python3 --version
Python 3.7.3
root@e27df07f4a6d:/# pip3 --version
pip 18.1 from /usr/lib/python3/dist-packages/pip (python 3.7)
root@e27df07f4a6d:/# pip --version
pip 19.2.3 from /usr/local/lib/python2.7/dist-packages/pip (python 2.7)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装必备组件&#34;&gt;安装必备组件&lt;/h2&gt;

&lt;p&gt;就是 Git，screen 之类的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get install git screen -y
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;-y：yes，在命令行交互提示中，直接输入 yes 的意思&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;获取源码&#34;&gt;获取源码&lt;/h2&gt;

&lt;p&gt;接着用git来拉取源码，因为我们昨天搭建了宝塔面板，网站的目录在 &lt;code&gt;/www/wwwroot/&lt;/code&gt; 下，所以在这里拉取源码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@e27df07f4a6d:/# cd /www/wwwroot/
root@e27df07f4a6d:/www/wwwroot# git clone https://github.com/HuaienYao/zhuye_kim.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;新建数据库&#34;&gt;新建数据库&lt;/h2&gt;

&lt;p&gt;我们在宝塔上新建数据库，这里数据库名字取&lt;code&gt;zhuye&lt;/code&gt;，用户名取&lt;code&gt;zhuye&lt;/code&gt; 密码用 &lt;code&gt;123456&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者你可以用原有的数据库，只需要修改&lt;code&gt;/www/wwwroot/zhuye_kim/zhuye_kim/settings.py&lt;/code&gt;文件的68行起的database部分设置，&lt;code&gt;&#39;NAME&#39;&lt;/code&gt;部分改为你的原有数据库名，&lt;code&gt;&#39;USER&#39;&lt;/code&gt;改为你的原有数据库用户名，&lt;code&gt;&#39;PASSWORD&#39;&lt;/code&gt;改为你原有数据库的密码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Database

DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
        &#39;NAME&#39;: &#39;zhuye&#39;,
        &#39;USER&#39;: &#39;zhuye&#39;,
        &#39;PASSWORD&#39;: &#39;123456&#39;,
        &#39;HOST&#39;: &#39;127.0.0.1&#39;,
        &#39;PORT&#39;: &#39;3306&#39;,
        &#39;OPTIONS&#39;: {
            &#39;init_command&#39;: &amp;quot;SET sql_mode=&#39;STRICT_TRANS_TABLES&#39;&amp;quot;,
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装必备库-迁移模型-更新表结构&#34;&gt;安装必备库，迁移模型(更新表结构)&lt;/h2&gt;

&lt;p&gt;这步我就照做就行。。还不理解python的知识。。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /www/wwwroot/zhuye_kim/
pip3 install -r requirements.txt
python3 manage.py makemigrations --merge
python3 manage.py makemigrations
python3 manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;运行网站&#34;&gt;运行网站&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /www/wwwroot/zhuye_kim/
# screen就是开一个后台
screen -S zhuye
python3 manage.py runserver 127.0.0.1:8001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行成功会显示以下信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sh-5.0# python3 manage.py runserver 127.0.0.1:8001
Performing system checks...

System check identified no issues (0 silenced).
October 01, 2019 - 16:44:23
Django version 2.0.12, using settings &#39;zhuye_kim.settings&#39;
Starting development server at http://127.0.0.1:8001/
Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要停止运行就是 Ctrl＋C&lt;/p&gt;

&lt;h3 id=&#34;关于screen命令&#34;&gt;关于screen命令&lt;/h3&gt;

&lt;p&gt;这是linux里开启多任务的命令，可以理解成窗口。如果你创建了这个，并运行了网站，但是如果你直接关闭窗口还是会停止的。如果只是想最小化，暂时断开的话，需要用&lt;code&gt;Ctrl+A+D&lt;/code&gt; 就可以暂时断开（detach）这个任务。
之后回来可以通过&lt;code&gt;screen -r session名字&lt;/code&gt; 这里就是你之前设置的zhuye&lt;/p&gt;

&lt;p&gt;这里附上一些screen的常用命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;screen -S yourname -&amp;gt; 新建一个叫yourname的session
screen -ls -&amp;gt; 列出当前所有的session
screen -r yourname -&amp;gt; 回到yourname这个session
screen -d yourname -&amp;gt; 远程detach某个session
screen -d -r yourname -&amp;gt; 结束当前session并回到yourname这个session
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;反向代理&#34;&gt;反向代理&lt;/h2&gt;

&lt;p&gt;然后就是在宝塔反向代理这个端口。&lt;/p&gt;

&lt;p&gt;宝塔面板添加网站&lt;/p&gt;

&lt;p&gt;如下图所示，在宝塔面板的【网站】【添加站点】添加一个站点。
&lt;img src=&#34;https://ae01.alicdn.com/kf/He609c1f0a4d84abd940ddfd1ebae2916e.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后在面板的网站列表找到你刚添加的网站，点击网站名弹出设置，左侧选择反向代理，如下图所示设置保存。
&lt;img src=&#34;https://ae01.alicdn.com/kf/H165db11268ec40c5a5e980d3d6222c5ah.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果前面没出错误信息，应该就可以访问了。&lt;/p&gt;

&lt;p&gt;通过你的域名访问，当然你要提前把域名解析到这个服务器上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hb194233d718d495d84c0a8bd992d7211Q.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后台就是 http://域名/admin 来访问&lt;/p&gt;

&lt;p&gt;管理员用户名admin 密码12345678@&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hf495610e6b2f41a0bb2584e73f85244bp.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wenguonideshou/zhuye_kim&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;zhuye.kim源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.moerats.com/archives/679/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Django框架开发的仿zhuye.kim的简单个人主页/导航程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;linux screen 命令详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/keith_bb/article/details/65435337&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Linux-Ubuntu16.04下Python3.5安装pip3以及scrapy、numpy、itchat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.cn/article-8215-1.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;screen 命令使用及示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>记录docker安装宝塔面板</title>
      <link>https://huaien.co/technology/docker-install-bt-panel/</link>
      <pubDate>Mon, 30 Sep 2019 10:58:47 +0900</pubDate>
      
      <guid>https://huaien.co/technology/docker-install-bt-panel/</guid>
      <description>

&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;因为最近在学docker，而且有oracle的免费机，就像测试测试docker安装宝塔面板的效果。其实通过一系列操作可以学习到挺多docker命令。&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h1 id=&#34;安装docker&#34;&gt;安装Docker&lt;/h1&gt;

&lt;p&gt;首先你的机器上要有docker，如果没有安装的话可以通过下面的命令安装docker。&lt;/p&gt;

&lt;h2 id=&#34;安装前的准备&#34;&gt;安装前的准备&lt;/h2&gt;

&lt;p&gt;这里用的是Oracle免费机来测试，系统为Ubuntu
通过以下命令可以查看OS信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@instance:/home/ubuntu# uname -a
Linux instance 4.15.0-1021-oracle #23-Ubuntu SMP Wed Aug 7 16:35:09 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
root@instance:/home/ubuntu# cat /proc/version
Linux version 4.15.0-1021-oracle (buildd@lgw01-amd64-030) (gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04.1)) #23-Ubuntu SMP Wed Aug 7 16:35:09 UTC 2019
root@instance:/home/ubuntu# cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=18.04
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION=&amp;quot;Ubuntu 18.04.3 LTS&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker 要求 Ubuntu 系统的内核版本高于 3.10
通过以下命令查看&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@instance-20190921-1119:/home/ubuntu# uname -r
4.15.0-1021-oracle

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个机器是4.15 可以安装。&lt;/p&gt;

&lt;h2 id=&#34;安装docker的命令&#34;&gt;安装Docker的命令&lt;/h2&gt;

&lt;p&gt;然后这里用的是以下的命令安装docker。官方是使用&lt;a href=&#34;https://yeasy.gitbooks.io/docker_practice/install/ubuntu.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;的方法，比较麻烦&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#先更新下ubuntu软件库
apt-get update
#通过apt-get安装docker
apt-get install docker.io
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;查看docker版本&#34;&gt;查看Docker版本&lt;/h2&gt;

&lt;p&gt;接着查看docker版本，能显示就是安装成功&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@instance:/home/ubuntu# docker version
Client:
 Version:           18.09.7
 API version:       1.39
 Go version:        go1.10.1
 Git commit:        2d0083d
 Built:             Fri Aug 16 14:20:06 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.09.7
  API version:      1.39 (minimum version 1.12)
  Go version:       go1.10.1
  Git commit:       2d0083d
  Built:            Wed Aug 14 19:41:23 2019
  OS/Arch:          linux/amd64
  Experimental:     false
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;docker内安装宝塔&#34;&gt;Docker内安装宝塔&lt;/h1&gt;

&lt;h2 id=&#34;拉取系统镜像&#34;&gt;拉取系统镜像&lt;/h2&gt;

&lt;p&gt;先拉取一个系统镜像。这里选了debian，好用又比较小。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull debian
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建运行容器&#34;&gt;创建运行容器&lt;/h2&gt;

&lt;p&gt;接着创建和运行容器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i -t -d --name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 --privileged=true -v /home/www:/www debian
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;上面命令的意思是创建一个docker容易命名为baota(名称大家自定义)让他后台运行，然后将宿主机的20，21，80，443，888，8888这五个端口映射到docker容器中去。
并且将宿主机的/home/www文件夹映射到docker容器的/www上去(注意：文件目录如果不存在。宿主机和容器会自己创建，无需手动创建)。privileged表示在运行容器的时候，给容器加特权，设置容器有写文件的权限。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查看容器的运行状态和ID&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;进入该容器&#34;&gt;进入该容器&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it d497dcfd6062  /bin/bash(这里也可以直接用 bash)或者下面都行
docker exec -it baota /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;exec 为在进入容器进行操作&lt;/p&gt;

&lt;p&gt;-i :即使没有附加也保持STDIN 打开&lt;/p&gt;

&lt;p&gt;-t :分配一个伪终端&lt;/p&gt;

&lt;p&gt;这里的&lt;code&gt;d497dcfd6062&lt;/code&gt;为上面&lt;code&gt;docker ps&lt;/code&gt;得到的容器ID&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;执行上进入容器命令后会显示下面这样，就是进入了这个Debian容器了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@e27df07f4a6d:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;容器内安装宝塔&#34;&gt;容器内安装宝塔&lt;/h2&gt;

&lt;p&gt;接着用宝塔官方的安装命令，这里用的是Debian系统下的宝塔安装命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;amp;&amp;amp; bash install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会让你输入y来确认安装，然后就等着装好。&lt;/p&gt;

&lt;h2 id=&#34;错误信息&#34;&gt;错误信息&lt;/h2&gt;

&lt;h3 id=&#34;错误信息内容&#34;&gt;错误信息内容&lt;/h3&gt;

&lt;p&gt;但是这里我最后出现错误&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;------------------------------------------------------
Error: BT-Task service startup failed.
username: ed5ymzfg
Stopping Bt-Tasks.../etc/init.d/bt: line 76: ps: command not found
        done
Stopping Bt-Panel.../etc/init.d/bt: line 86: ps: command not found
        done
/etc/init.d/bt: line 23: ps: command not found
Starting Bt-Panel..     done
/etc/init.d/bt: line 53: ps: command not found
Starting Bt-Tasks... /etc/init.d/bt: line 58: ps: command not found
failed
------------------------------------------------------
--2019-09-30 02:25:28--  http://103.224.251.67/stop.html
Connecting to 103.224.251.67:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3460 (3.4K) [text/html]
Saving to: &#39;/www/server/stop/index.html&#39;

     0K ...                                                   100%  484M=0s

2019-09-30 02:25:28 (484 MB/s) - &#39;/www/server/stop/index.html&#39; saved [3460/3460]

--2019-09-30 02:25:29--  http://103.224.251.67/stop.html
Connecting to 103.224.251.67:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3460 (3.4K) [text/html]
Saving to: &#39;/www/server/stop/index.html&#39;

     0K ...                                                   100%  568M=0s

2019-09-30 02:25:29 (568 MB/s) - &#39;/www/server/stop/index.html&#39; saved [3460/3460]

------------------------------------------------------
Error: BT-Task service startup failed.
install.sh: line 478: ps: command not found
ERROR: The BT-Panel service startup failed.
============================================
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;错误原因&#34;&gt;错误原因&lt;/h3&gt;

&lt;p&gt;我简单看了下，搜索网上解决办法，一个是
&lt;a href=&#34;https://blog.csdn.net/weixin_42453905/article/details/89399089&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/weixin_42453905/article/details/89399089&lt;/a&gt;
和 &lt;a href=&#34;https://www.daniao.org/3790.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.daniao.org/3790.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;解决错误&#34;&gt;解决错误&lt;/h3&gt;

&lt;p&gt;好像是python版本还是python public包和面板冲突的原因，看了下本机python版本为2.7，然后就用下面的命令安装了python3&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install python3.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后解决下public包冲突，接着重启宝塔&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip uninstall public
bt restart 
#或者
/etc/init.d/bt restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这里还是提示错误&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Stopping Bt-Tasks.../etc/init.d/bt: line 76: ps: command not found
        done
Stopping Bt-Panel.../etc/init.d/bt: line 86: ps: command not found
        done
/etc/init.d/bt: line 23: ps: command not found
Starting Bt-Panel..     done
/etc/init.d/bt: line 53: ps: command not found
Starting Bt-Tasks... /etc/init.d/bt: line 58: ps: command not found
failed
------------------------------------------------------
--2019-09-30 02:25:28--  http://103.224.251.67/stop.html
Connecting to 103.224.251.67:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3460 (3.4K) [text/html]
Saving to: &#39;/www/server/stop/index.html&#39;

     0K ...                                                   100%  484M=0s

2019-09-30 02:25:28 (484 MB/s) - &#39;/www/server/stop/index.html&#39; saved [3460/3460]

--2019-09-30 02:25:29--  http://103.224.251.67/stop.html
Connecting to 103.224.251.67:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3460 (3.4K) [text/html]
Saving to: &#39;/www/server/stop/index.html&#39;

     0K ...                                                   100%  568M=0s

2019-09-30 02:25:29 (568 MB/s) - &#39;/www/server/stop/index.html&#39; saved [3460/3460]

------------------------------------------------------
Error: BT-Task service startup failed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在没了之前的BT-panel无法启动的错误，但是还有ps命令没找到的错误。所以需要安装下ps。
这里参考了这里
&lt;a href=&#34;https://www.imooc.com/qadetail/217173&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.imooc.com/qadetail/217173&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install procps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正常安装后测试一下ps命令，显示以下内容就是安装成功&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@e27df07f4a6d:/# ps
  PID TTY          TIME CMD
    8 pts/1    00:00:00 bash
 5593 pts/1    00:00:03 python
 5669 pts/1    00:00:03 python
 6483 pts/1    00:00:01 python
 6553 pts/1    00:00:01 python
 6653 pts/1    00:00:01 python
 6737 pts/1    00:00:01 python
 6823 pts/1    00:00:01 python
 6899 pts/1    00:00:01 python
 6971 pts/1    00:00:00 ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再重启下宝塔面板试试看&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@e27df07f4a6d:/# /etc/init.d/bt restart
Stopping Bt-Tasks...    done
Stopping Bt-Panel...    done
Starting Bt-Panel.......        done
Starting Bt-Tasks...    done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没有提示错误可以启动。&lt;/p&gt;

&lt;h2 id=&#34;获取宝塔面板入口&#34;&gt;获取宝塔面板入口&lt;/h2&gt;

&lt;p&gt;但是这里因为刚才安装没有正常结束，应该最后没有正常显示面板入口 登录用户名密码等信息。&lt;/p&gt;

&lt;p&gt;如果你直接进入 &lt;a href=&#34;https://IP地址:8888&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://IP地址:8888&lt;/a&gt;
就会显示下面的内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;请使用正确的入口登录面板
错误原因：当前宝塔新安装的已经开启了安全入口登录，新装机器都会随机一个8位字符的安全入口名称，亦可以在面板设置处修改，如您没记录或不记得了，可以使用以下方式解决

解决方法：在SSH终端输入以下一种命令来解决

1.查看面板入口：/etc/init.d/bt default

2.关闭安全入口：rm -f /www/server/panel/data/admin_path.pl

注意：【关闭安全入口】将使您的面板登录地址被直接暴露在互联网上，非常危险，请谨慎操作
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据提示内容，在容器内操作下面的命令来查看面板入口信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/etc/init.d/bt default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会显示以下信息，然后用这个地址，用户名密码登陆就可以了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;==================================================================
BT-Panel default info!
==================================================================
Bt-Panel-URL: http://IP地址:8888/2bdsdb7ca
username: edsdmzfg
password: 6c750614
Warning:
If you cannot access the panel,
release the following port (8888|888|80|443|20|21) in the security group
==================================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;设置容器自启&#34;&gt;设置容器自启&lt;/h2&gt;

&lt;p&gt;这里我们开头并没有对容器设置了自动启动参数。
如果一开始要设置重启后自动启动容器的话，可以用下面的命令&lt;/p&gt;

&lt;h3 id=&#34;初次运行时&#34;&gt;初次运行时&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --restart=always  -i -t -d --name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 --privileged=true -v /home/www:/www debian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实就是&lt;code&gt;docker run&lt;/code&gt;的时候加入&lt;code&gt;--restart=always&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;运行后的容器更新自启设置&#34;&gt;运行后的容器更新自启设置&lt;/h3&gt;

&lt;p&gt;如果前面运行的时候没设置自动启动，但是现在想设置的话，可以用下面的命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker update --restart=always &amp;lt;CONTAINER ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;容器ID可以通过&lt;code&gt;docker ps -a&lt;/code&gt;或者 &lt;code&gt;docker container ls&lt;/code&gt;来查看&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@instance:/home/ubuntu# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                                                                                              NAMES
e27df07f4a6d        debian              &amp;quot;bash&amp;quot;              2 hours ago         Up 2 hours          0.0.0.0:20-21-&amp;gt;20-21/tcp, 0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp, 0.0.0.0:888-&amp;gt;888/tcp, 0.0.0.0:8888-&amp;gt;8888/tcp   baota
root@instance:/home/ubuntu# docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                                                                                              NAMES
e27df07f4a6d        debian              &amp;quot;bash&amp;quot;              2 hours ago         Up 2 hours          0.0.0.0:20-21-&amp;gt;20-21/tcp, 0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp, 0.0.0.0:888-&amp;gt;888/tcp, 0.0.0.0:8888-&amp;gt;8888/tcp   baota
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;退出容器等操作&#34;&gt;退出容器等操作&lt;/h2&gt;

&lt;h3 id=&#34;退出并停止容器&#34;&gt;退出并停止容器&lt;/h3&gt;

&lt;p&gt;最后如果要退出容器可以使用
&lt;code&gt;Ctrl+D&lt;/code&gt; 或者&lt;code&gt;exit&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@e27df07f4a6d:/# exit
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这样退出后会停止容器。&lt;/p&gt;

&lt;h3 id=&#34;退出但是不停止容器&#34;&gt;退出但是不停止容器&lt;/h3&gt;

&lt;p&gt;想要退出但是不停止容器就要用
&lt;code&gt;Ctrl+P+Q&lt;/code&gt;
这样的话容器还在继续运行中。&lt;/p&gt;

&lt;h3 id=&#34;停止容器&#34;&gt;停止容器&lt;/h3&gt;

&lt;p&gt;想要停止运行中的容器就用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop 容器名或者容器ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行就用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker start 容器名或者容器ID
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;进入容器&#34;&gt;进入容器&lt;/h3&gt;

&lt;p&gt;如果要进入正在运行的容器就用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker attach 容器名或者容器ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it 容器名或者容器ID /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@instance:/home/ubuntu# docker exec -it e27 /bin/bash
root@instance:/home/ubuntu# docker attach baota
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：docker的容器ID可以用只取前几位能定位到容器就可以。&lt;/p&gt;

&lt;h1 id=&#34;参考文章&#34;&gt;参考文章&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/phpper/p/10844757.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;docker中安装宝塔面板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qiancheng.me/post/coding/show-linux-issue-version&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;如何查看LINUX发行版的名称及其版本号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/docker/ubuntu-docker-install.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Ubuntu Docker 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.runoob.com/docker/docker-exec-command.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Docker exec 命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bt.cn/bbs/thread-19376-1-1.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;宝塔Linux面板安装教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo的LeaveIt主题优化记录二-添加字数统计,阅读时间,放大图片</title>
      <link>https://huaien.co/technology/hugo-leaveit-theme-update-logs/</link>
      <pubDate>Wed, 31 Jul 2019 05:18:22 +0000</pubDate>
      
      <guid>https://huaien.co/technology/hugo-leaveit-theme-update-logs/</guid>
      <description>

&lt;h2 id=&#34;添加字数统计-阅读时间&#34;&gt;添加字数统计,阅读时间&lt;/h2&gt;

&lt;p&gt;原文章标题下的分类目录等的样式是下面图片的样子。图片截图于主题&lt;a href=&#34;https://liuzhichao.com/2018/hugo-theme-leaveit/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;原作者博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hc1715da2ca7c43d9b64791b16b8a97d8I.jpg&#34; alt=&#34;截自主题原作者博客&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在添加了字数统计和阅读时间后，将排版改成下面这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H0199dad846c04a20a55014a76bc46759K.jpg&#34; alt=&#34;新的样式&#34; /&gt;&lt;/p&gt;

&lt;p&gt;直接放相关代码&lt;/p&gt;

&lt;h3 id=&#34;导入font-awesome的cdn地址&#34;&gt;导入font awesome的cdn地址&lt;/h3&gt;

&lt;p&gt;在主题目录的&lt;code&gt;/LeaveIt/layouts/partials/head.html&lt;/code&gt;的 &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt;标签前(为了方便查看建议在原有的  &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;标签后)加入下面代码，以加入font awesome  5.9.0版本为例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&amp;quot;//use.fontawesome.com/releases/v5.9.0/css/all.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;修改文章页面的排版&#34;&gt;修改文章页面的排版&lt;/h3&gt;

&lt;p&gt;修改主题目录下的&lt;code&gt;/LeaveIt/layouts/_default/single.html&lt;/code&gt;文件，将第7行开始的下面的代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;                Written by &amp;lt;a itemprop=&amp;quot;name&amp;quot; href=&amp;quot;{{.Site.BaseURL }}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;{{ if isset .Params &amp;quot;author&amp;quot; }}{{ .Params.author }}{{ else }}{{ .Site.Params.author }}{{ end }}&amp;lt;/a&amp;gt; with ♥ 
                &amp;lt;span class=&amp;quot;post-time&amp;quot;&amp;gt;
                on &amp;lt;time datetime={{.Date.Format (.Site.Params.dateFormatToUse | default &amp;quot;2006-01-02&amp;quot;) }} itemprop=&amp;quot;datePublished&amp;quot;&amp;gt;{{ .Date.Format (.Site.Params.dateFormatToUse | default &amp;quot;January 2, 2006&amp;quot;) }}&amp;lt;/time&amp;gt;
                &amp;lt;/span&amp;gt;
                in
                {{ with .Params.categories -}}
                &amp;lt;i class=&amp;quot;iconfont icon-folder&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;span class=&amp;quot;post-category&amp;quot;&amp;gt;
                        {{ range . }}
                        {{- $name := . -}}
                        {{- with $.Site.GetPage &amp;quot;taxonomy&amp;quot; (printf &amp;quot;categories/%s&amp;quot; $name) | default ($.Site.GetPage &amp;quot;taxonomy&amp;quot; (printf &amp;quot;categories/%s&amp;quot; ($name | urlize))) -}}
                          &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt; {{ $name }} &amp;lt;/a&amp;gt;
                        {{ end -}}
                        {{ end }}
                &amp;lt;/span&amp;gt;
                {{- end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;            {{ with .Params.categories -}}
          &amp;lt;i class=&amp;quot;far fa-folder-open&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;span class=&amp;quot;post-category&amp;quot;&amp;gt;
                        {{ range . }}
                        {{- $name := . -}}
                        {{- with $.Site.GetPage &amp;quot;taxonomy&amp;quot; (printf &amp;quot;categories/%s&amp;quot; $name) | default ($.Site.GetPage &amp;quot;taxonomy&amp;quot; (printf &amp;quot;categories/%s&amp;quot; ($name | urlize))) -}}
                          &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt; {{ $name }} &amp;lt;/a&amp;gt;
                        {{ end -}}
                        {{ end }}
                &amp;lt;/span&amp;gt;
            {{- end }}
          &amp;lt;span class=&amp;quot;post-time&amp;quot;&amp;gt;
         &amp;lt;i class=&amp;quot;far fa-calendar-alt&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;  &amp;lt;time datetime={{.Date.Format (.Site.Params.dateFormatToUse | default &amp;quot;2006-01-02&amp;quot;) }} itemprop=&amp;quot;datePublished&amp;quot;&amp;gt;{{ .Date.Format (.Site.Params.dateFormatToUse | default &amp;quot;2006-01-02&amp;quot;) }}&amp;lt;/time&amp;gt;
           &amp;lt;/span&amp;gt;
         &amp;lt;i class=&amp;quot;far fa-file-word&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;span class=&amp;quot;post-word-count&amp;quot;&amp;gt; {{ .WordCount }} 字&amp;lt;/span&amp;gt;
         &amp;lt;i class=&amp;quot;far fa-clock&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;span class=&amp;quot;more-meta&amp;quot;&amp;gt; {{ .ReadingTime }} 分钟&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就修改成了上图的排版，添加了字数统计及阅读时间。以及添加了几个font awesome的图标。使得比较简单点。
不过用了字数统计，就需要在站点配置文件config.toml里面添加一个配置，表示网站内容包含中文，日语，韩文。可以更准确的统计字数。(或者在文章的frontmatter内单独添加这个配置应该也行的)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hasCJKLanguage = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;放大文章内图片显示&#34;&gt;放大文章内图片显示&lt;/h2&gt;

&lt;p&gt;LeaveIt主题内置了LightGallery灯箱效果，所以图片原状态是比较小，需要点击才能放大，但是通过添加下面的代码就可以让图片放大显示，对眼睛舒服点。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;assets/css/_custom.scss&lt;/code&gt; 中添加下面代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	.post-warp .post-content img {
  		max-width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo的LeaveIt主题优化记录一-修复错位，添加toc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/valine-to-hugo-with-leaveit/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo添加Valine评论系统 以LeaveIt主题为例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/install-ruby-update-on-centos/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Centos下安装和升级Ruby和sass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考文章&#34;&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.me/2018/025/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Leavelt 主题优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Centos安装和升级Ruby和sass</title>
      <link>https://huaien.co/technology/install-ruby-update-on-centos/</link>
      <pubDate>Wed, 31 Jul 2019 04:59:52 +0000</pubDate>
      
      <guid>https://huaien.co/technology/install-ruby-update-on-centos/</guid>
      <description>&lt;h2 id=&#34;安装ruby&#34;&gt;安装Ruby&lt;/h2&gt;

&lt;p&gt;Centos下在线安装Ruby,版本可能比较旧&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后可以通过&lt;code&gt;ruby -v&lt;/code&gt;来查看版本&lt;/p&gt;

&lt;h2 id=&#34;rvm升级ruby&#34;&gt;RVM升级Ruby&lt;/h2&gt;

&lt;p&gt;如果版本太低了，可以听过RVM来升级Ruby&lt;/p&gt;

&lt;p&gt;什么是RVM？
&amp;gt; RAM（Ruby Version Manager ）是一款RAM的命令行工具，可以使用RAM轻松安装，管理Ruby版本。RVM包含了Ruby的版本管理和Gem库管理(gemset)&lt;/p&gt;

&lt;p&gt;可以通过以下命令来安装RVM&lt;/p&gt;

&lt;p&gt;先安装GPG keys:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再安装RVM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;\curl -sSL https://get.rvm.io | bash -s stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果需要在安装RVM的同时安装Ruby 和 Rails 的话用下面的命令:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;\curl -sSL https://get.rvm.io | bash -s stable --rails
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后需要更新配置文件，来使其生效&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source /etc/profile.d/rvm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着可以通过&lt;code&gt;rvm -v&lt;/code&gt;来查看RVM版本信息，如果可以代表安装成功。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host ~]# rvm -v
rvm 1.29.9 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行以下命令来查看Ruby版本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rvm list known
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host ~]# rvm list known
# MRI Rubies
[ruby-]1.8.6[-p420]
[ruby-]1.8.7[-head] # security released on head
[ruby-]1.9.1[-p431]
[ruby-]1.9.2[-p330]
[ruby-]1.9.3[-p551]
[ruby-]2.0.0[-p648]
[ruby-]2.1[.10]
[ruby-]2.2[.10]
[ruby-]2.3[.8]
[ruby-]2.4[.6]
[ruby-]2.5[.5]
[ruby-]2.6[.3]
[ruby-]2.7[.0-preview1]
ruby-head

# for forks use: rvm install ruby-head-&amp;lt;name&amp;gt; --url https://github.com/githuby.git --branch 2.2

# JRuby
jruby-1.6[.8]
jruby-1.7[.27]
jruby-9.1[.17.0]
jruby[-9.2.7.0]
jruby-head

# Rubinius
rbx-1[.4.3]
rbx-2.3[.0]
rbx-2.4[.1]
rbx-2[.5.8]
rbx-3[.107]
rbx-4[.3]
rbx-head

# TruffleRuby
truffleruby[-19.1.0]

# Opal
opal

# Minimalistic ruby implementation - ISO 30170:2012
mruby-1.0.0
mruby-1.1.0
mruby-1.2.0
mruby-1.3.0
mruby-1[.4.1]
mruby-2[.0.1]
mruby[-head]

# Ruby Enterprise Edition
ree-1.8.6
ree[-1.8.7][-2012.02]

# Topaz
topaz

# MagLev
maglev-1.0.0
maglev-1.1[RC1]
maglev[-1.2Alpha4]
maglev-head

# Mac OS X Snow Leopard Or Newer
macruby-0.10
macruby-0.11
macruby[-0.12]
macruby-nightly
macruby-head

# IronRuby
ironruby[-1.1.3]
ironruby-head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以通过下面的命令来安装指定版本的Ruby，例如Ruby2.5&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rvm install 2.5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装后可以通过下面的命令来检测是否安装成功&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host ~]# ruby -v
ruby 2.5.5p157 (2019-03-15 revision 67260) [i686-linux]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;添加ruby仓库&#34;&gt;添加ruby仓库&lt;/h2&gt;

&lt;p&gt;如何添加ruby仓库&lt;/p&gt;

&lt;p&gt;添加aliyun镜像并检测Ruby版本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem sources -a http://mirrors.aliyun.com/rubygems/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用rvm安装发现下载缓慢，可以考虑删除原来的仓库地址，只保留阿里云镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem sources --remove https://rubygems.org/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;延伸阅读&#34;&gt;延伸阅读&lt;/h2&gt;

&lt;p&gt;为什么要安装Ruby呢？因为Hugo的这个LeaveIt主题有用到sass编译，但是sass编译需要安装sass，&lt;/p&gt;

&lt;p&gt;因为以上安装了Ruby，所以可以通过 gem安装sass。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install sass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后用命令查看版本，看是否安装成功&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host ~]# sass -v
Ruby Sass 3.7.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示sass安装成功后，我们每次在修改了LeaveIt主题的样式后都需要执行下面的命令，不然修改的样式没有变化。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sass --style compressed [Leacelt 目录]/assets/css/main.scss:[Leacelt 目录]/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要替换上面的&lt;code&gt;[Leacelt 目录]&lt;/code&gt;，命令执行后就会在LeaveIt主题目录下的&lt;code&gt;/resources/_gen/assets/scss/css/&lt;/code&gt;下更新&lt;code&gt;.content文件&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其实还有另一种方法，你可以直接使用Hugo提供的hugo_extended版本就可以直接编译sass了，不需要另外执行sass编译命令。         可以参考&lt;a href=&#34;https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/#%E5%8E%9F%E5%9B%A0/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo的LeaveIt主题优化记录一-修复错位，添加toc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rvm.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_26440803/article/details/82717244/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Centos7安装升级Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.me/2018/025/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Leavelt 主题优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://akisnote.com/2018/12/sass-scss/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;簡単！便利！HugoでSass/Scssを使う方法！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sass.hk/install/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;如何安装Sass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Hugo的LeaveIt主题优化记录一-修复错位，添加toc</title>
      <link>https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/</link>
      <pubDate>Mon, 29 Jul 2019 07:42:33 +0000</pubDate>
      
      <guid>https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/</guid>
      <description>

&lt;h2 id=&#34;标签处的back-home按钮位置错位&#34;&gt;标签处的back・home按钮位置错位&lt;/h2&gt;

&lt;p&gt;这个问题我现在才发现，原来是因为这个主题在生成静态文件的时候需要sass编译。难怪我每次修改&lt;code&gt;/themes/LeaveIt/assets/css/&lt;/code&gt;下面的样式总不见效果。后来一直直接修改的站点目录下的/resources/_gen/assets/scss/css/XXX.content文件才会看到修改的效果。直到今天，我发现原来普通版本的hugo是不支持sass编译的，查看了这个&lt;a href=&#34;https://github.com/liuzc/LeaveIt/issues/14/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;#14 Issue&lt;/a&gt;才知道原来要用hugo extended版本才可以编译sass。
可以从&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo Release页面&lt;/a&gt;下载该版本。&lt;/p&gt;

&lt;h3 id=&#34;原因&#34;&gt;原因&lt;/h3&gt;

&lt;p&gt;其实就是&lt;code&gt;/themes/LeaveIt/assets/css/_common/_page/post.scss&lt;/code&gt;样式表的&lt;code&gt;.post-tags&lt;/code&gt;样式问题，这个文件里的&lt;code&gt;.post-tags&lt;/code&gt;样式应该是正常的，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    .post-tags {
        padding: 1rem 0 1rem;
        display: flex;
        justify-content: space-between;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而主题目录自带的&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content&lt;/code&gt;里的&lt;code&gt;.post-tags&lt;/code&gt;样式却是不一样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H39fd4ba308524a4cb510f832b7753b8fl.jpg&#34; alt=&#34;原作者github主题截图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/liuzc/LeaveIt/blob/master/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;点此&lt;/a&gt;进入相关页面。&lt;/p&gt;

&lt;p&gt;原因就在于作者生成的&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content&lt;/code&gt;里的&lt;code&gt;.post-tags&lt;/code&gt;样式是错误的，正常应该在使用&lt;code&gt;hugo&lt;/code&gt;命令生成静态页面的时候会通过sass编译重新生成&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content&lt;/code&gt;文件，但是由于我用的版本不是&lt;code&gt;hugo_extend&lt;/code&gt;版本，所以每次生成静态页面都导致在 &lt;code&gt;/themes/LeaveIt/assets/css/_common/_page/post.scss&lt;/code&gt; 里面修改的都不能更新到&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content&lt;/code&gt;所以没有效果。&lt;/p&gt;

&lt;h3 id=&#34;解决方法&#34;&gt;解决方法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;使用支持sass编译的&lt;a href=&#34;https://github.com/gohugoio/hugo/releases//&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;hugo extend版本&lt;/a&gt;，就可以通过修改&lt;code&gt;/themes/LeaveIt/assets/css/_common/_page/post.scss&lt;/code&gt;来实现效果。&lt;/li&gt;
&lt;li&gt;使用普通的不支持sass编译的hugo版本，这样需要直接修改&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/&lt;/code&gt;下的.content文件，这样的话修改&lt;code&gt;/themes/LeaveIt/assets/css/&lt;/code&gt;下的文件均无法直接反应效果。&lt;/li&gt;
&lt;li&gt;使用普通的不支持sass编译的hugo版本，在修改样式后，需要使用sass命令来编译生成一下.content文件，具体可以参考&lt;a href=&#34;https://huaien.co/technology/install-ruby-update-on-centos/#延伸阅读&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;文章页添加toc目录支持&#34;&gt;文章页添加TOC目录支持&lt;/h2&gt;

&lt;p&gt;原版的LeaveIt主题没有很好的支持TOC文章目录导航，但是@&lt;a href=&#34;https://github.com/ehlxr/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ehlxr&lt;/a&gt; 在Github提交了&lt;a href=&#34;https://github.com/liuzc/LeaveIt/pull/11/commits&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;相关pull请求&lt;/a&gt; 根据这个成功添加了TOC目录支持。&lt;/p&gt;

&lt;p&gt;1，在&lt;code&gt;/themes/LeaveIt/assets/css/_custom.scss&lt;/code&gt;中添加下面的toc样式，可以根据自己的喜好自定义修改。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.post-toc {
    position: absolute;
    width: 200px;
    margin-left: 780px;
    padding: 10px;
    word-wrap: break-word;
    box-sizing: border-box;

    .post-toc-title {
        margin: 0;
        font-weight: 400;
        text-transform: uppercase;
    }

    .post-toc-content {
        &amp;amp;.always-active ul {
            display: block;
        }

        &amp;gt;nav&amp;gt;ul {
            margin: 10px 0;
        }

        ul {
            padding-left: 0;
            list-style: none;

            ul {
            padding-left: 15px;
            display: none;
            }

            .has-active &amp;gt; ul {
                display: block;
            }
        }
    }

    a:hover {
        color: #c05b4d;
        -webkit-transform: scale(1.1);
        -ms-transform: scale(1.1);
        transform: scale(1.1);
    }

    a {
        display: block;
        line-height: 30px;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        -webkit-transition-duration: .2s;
        transition-duration: .2s;
        -webkit-transition-property: -webkit-transform;
        transition-property: -webkit-transform;
        transition-property: transform;
        transition-property: transform,-webkit-transform;
        -webkit-transition-timing-function: ease-out;
        transition-timing-function: ease-out;
    }
}

@media only screen and (max-width: 1224px) {
    .post-toc {
        display: none;
    }
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;/themes/LeaveIt/layouts/partials/&lt;/code&gt;下新建&lt;code&gt;toc.html&lt;/code&gt;文件，内容为下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;post-toc&amp;quot; id=&amp;quot;post-toc&amp;quot;&amp;gt;
  &amp;lt;h2 class=&amp;quot;post-toc-title&amp;quot;&amp;gt;{{ T &amp;quot;toc&amp;quot; }}&amp;lt;/h2&amp;gt;
  {{ $globalAutoCollapseToc := .Site.Params.autoCollapseToc | default false }}
  &amp;lt;div class=&amp;quot;post-toc-content{{ if not (or .Params.autoCollapseToc (and $globalAutoCollapseToc (ne .Params.autoCollapseToc false))) }} always-active{{ end }}&amp;quot;&amp;gt;
    {{.TableOfContents}}
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  window.onload = function () {
    var fix = $(&#39;.post-toc&#39;);
    var end = $(&#39;.post-comment&#39;);
    var fixTop = fix.offset().top, fixHeight = fix.height();
    var endTop, miss;
    var offsetTop = fix[0].offsetTop;
    $(window).scroll(function () {
      var docTop = Math.max(document.body.scrollTop, document.documentElement.scrollTop);
      if (end.length &amp;gt; 0) {
        endTop = end.offset().top;
        miss = endTop - docTop - fixHeight;
      }
      if (fixTop &amp;lt; docTop) {
        fix.css({ &#39;position&#39;: &#39;fixed&#39; });
        if ((end.length &amp;gt; 0) &amp;amp;&amp;amp; (endTop &amp;lt; (docTop + fixHeight))) {
          fix.css({ top: miss });
        } else {
          fix.css({ top: 0 });
        }
      } else {
        fix.css({ &#39;position&#39;: &#39;absolute&#39; });
        fix.css({ top: offsetTop });
      }
    })
  }
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在文章页的模板&lt;code&gt;/themes/LeaveIt/layouts/_default/single.html&lt;/code&gt;中 &lt;code&gt;&amp;lt;/header&amp;gt;&lt;/code&gt;标签后引入TOC模板&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;	{{ if ( .Site.Params.toc | default true ) }}
          {{ partial &amp;quot;toc.html&amp;quot; . }}
	{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加后重新使用hugo来生成静态页面，可以在文章页查看到已经有toc目录导航了。当然前提是你得在编辑文章的时候使用到 h1，h2等标题样式。&lt;/p&gt;

&lt;p&gt;最后站点的配置文件&lt;code&gt;config.toml&lt;/code&gt;添加以下配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;toc = true                # 是否开启目录
autoCollapseToc = true   # Auto expand and collapse toc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;放大文章内图片显示&#34;&gt;放大文章内图片显示&lt;/h2&gt;

&lt;p&gt;LeaveIt主题内置了LightGallery灯箱效果，所以图片原状态是比较小，需要点击才能放大，但是通过添加下面的代码就可以让图片放大显示，对眼睛舒服点。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;assets/css/_custom.scss&lt;/code&gt; 中添加下面代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	.post-warp .post-content img {
  		max-width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/valine-to-hugo-with-leaveit/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo添加Valine评论系统 以LeaveIt主题为例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/install-ruby-update-on-centos/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Centos下安装和升级Ruby和sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.me/2018/025/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Leavelt 主题优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>一键备份博客源文件与发布文章到Github和Coding</title>
      <link>https://huaien.co/technology/one-click-script-deploy-hugo/</link>
      <pubDate>Thu, 25 Jul 2019 14:58:47 +0800</pubDate>
      
      <guid>https://huaien.co/technology/one-click-script-deploy-hugo/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;经过一番折腾，利用shell脚本来实现更新文章后的一键备份博客源文件及发布文章到Github和Coding两个平台。&lt;/p&gt;

&lt;p&gt;在服务器博客主目录下新建一个文件，名为deploy.sh，将下面的脚本代码复制到新建的deploy.sh文件内。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host huaien.co]# touch deploy.sh
[root@host huaien.co]# vi deploy.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原先的版本是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
echo &amp;quot;............................&amp;quot;
echo &amp;quot;.开始执行文章发布更新与同步.&amp;quot;
echo &amp;quot;............................&amp;quot;

echo &amp;quot;进入博客主目录 /www/wwwroot/blog/huaien.co&amp;quot;
cd /www/wwwroot/blog/huaien.co

echo &amp;quot;检测上级目录tmp是否已有今日日期的目录，如有，改名为今日日期时分秒&amp;quot;
mv ../tmp/$(date +%Y%m%d)/ ../tmp/$(date +%Y%m%d%H%M%S)/

echo &amp;quot;在上级目录的tmp/下新建今日日期的目录&amp;quot;
mkdir ../tmp/$(date +%Y%m%d)/
mkdir ../tmp/$(date +%Y%m%d)/huaien.co/

echo &amp;quot;备份博客主目录下的.git目录至上级目录的tmp/今日日期/huaien.co/&amp;quot;
cp -rv .git deploy_backupblog.sh deploy config.toml ../tmp/$(date +%Y%m%d)/huaien.co/

echo &amp;quot;备份移动当前以后public目录至上级目录的tmp/今日日期/public/&amp;quot;
mv -v public ../tmp/$(date +%Y%m%d)/public

echo &amp;quot;生成博客内容 #会在博客主目录下生成public目录&amp;quot;
hugo

echo &amp;quot;复制备份好的原public目录下的.git目录至新生成的public目录下&amp;quot;
cp -rv ../tmp/$(date +%Y%m%d)/public/.git ../tmp/$(date +%Y%m%d)/public/CNAME ../tmp/$(date +%Y%m%d)/public/deploy_public.sh  public/

echo &amp;quot;进入public目录&amp;quot;
cd public

echo &amp;quot;-----------------开始将public同步到github和coding仓库---------------------&amp;quot;
git add .
git commit -m &amp;quot;更新博客&amp;quot;
git push -u github master
echo &amp;quot;同步到github仓库完成...&amp;quot;
git push -u coding master
echo &amp;quot;同步到coding仓库完成...&amp;quot;

echo &amp;quot;--------------------------同步public到仓库结束----------------------------&amp;quot;
echo &amp;quot;进入博客主目录&amp;quot;
cd ..
echo &amp;quot;复制原备份文件.git deploy_backupblog.sh config.toml到博客主目录&amp;quot;
cp -rv ../tmp/$(date +%Y%m%d)/huaien.co/.git ../tmp/$(date +%Y%m%d)/huaien.co/deploy_backupblog.sh ../tmp/$(date +%Y%m%d)/huaien.co/config.toml ../tmp/$(date +%Y%m%d)/huaien.co/deploy ./
echo &amp;quot;-----------------开始同步备份博客主目录到github和coding仓库----------------&amp;quot;
git add .
git commit -m &amp;quot;备份博客&amp;quot;
git push -u github master
echo &amp;quot;同步到github仓库完成...&amp;quot;
git push -u coding master
echo &amp;quot;同步到coding仓库完成...&amp;quot;
echo &amp;quot;-------------------------同步博客主目录到仓库结束---------------------------&amp;quot;

echo &amp;quot;................................&amp;quot;
echo &amp;quot;.文章发布更新与同步备份博客结束.&amp;quot;
echo &amp;quot;................................&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于上面这个需要转移.git文件夹等造成效率降低，所以将.git文件夹的备份改为删除除.git文件夹等以外的文件及文件夹。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
echo &amp;quot;............................&amp;quot;
echo &amp;quot;.开始执行文章发布更新与同步.&amp;quot;
echo &amp;quot;............................&amp;quot;

echo &amp;quot;进入博客的public目录 /www/wwwroot/blog/huaien.co/public&amp;quot;
cd /www/wwwroot/blog/huaien.co/public

echo &amp;quot;删除.git,deploy_public.sh以外的文件夹与文件&amp;quot;
ls -a| egrep -v &#39;^.git|deploy_public.sh$&#39; |xargs rm -r

echo &amp;quot;进入博客程序主目录&amp;quot;
cd ..

echo &amp;quot;生成博客内容 #会在博客主目录下生成public目录&amp;quot;
hugo

echo &amp;quot;进入博客的public目录&amp;quot;
cd public

echo &amp;quot;-----------------开始将public同步到github和coding仓库---------------------&amp;quot;
git add .
git commit -m &amp;quot;更新博客&amp;quot;
git push -u github master
echo &amp;quot;同步到github仓库完成...&amp;quot;
git push -u coding master
echo &amp;quot;同步到coding仓库完成...&amp;quot;

echo &amp;quot;--------------------------同步public到仓库结束----------------------------&amp;quot;
echo &amp;quot;进入博客主目录&amp;quot;
cd ..

echo &amp;quot;-----------------开始同步备份博客主目录到github和coding仓库----------------&amp;quot;
git add .
git commit -m &amp;quot;备份博客&amp;quot;
git push -u github master
echo &amp;quot;同步到github仓库完成...&amp;quot;
git push -u coding master
echo &amp;quot;同步到coding仓库完成...&amp;quot;
echo &amp;quot;-------------------------同步博客主目录到仓库结束---------------------------&amp;quot;

echo &amp;quot;................................&amp;quot;
echo &amp;quot;.文章发布更新与同步备份博客结束.&amp;quot;
echo &amp;quot;................................&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;关于双平台同步&#34;&gt;关于双平台同步&lt;/h2&gt;

&lt;p&gt;如何同时同步到Github和Coding平台呢？之前用Hexo的时候都是直接用Hexo的Hexo-deploy插件来同时部署到Github和Coding双平台。但是现在换到Hugo后，都是直接通过修改git的config配置文件来直接部署到相关平台。&lt;/p&gt;

&lt;p&gt;步骤如下&lt;/p&gt;

&lt;h3 id=&#34;1-初始化git&#34;&gt;1. 初始化git&lt;/h3&gt;

&lt;p&gt;在博客的源文件目录和public目录下分别执行下面的 命令以初始化git&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-修改-git文件夹下的config配置文件&#34;&gt;2. 修改.git文件夹下的config配置文件&lt;/h3&gt;

&lt;p&gt;分别修改博客的源文件目录和public目录下生成的.ggit目录下的config配置文件&lt;/p&gt;

&lt;p&gt;附上本博客的配置示例&lt;/p&gt;

&lt;h4 id=&#34;博客源文件目录下&#34;&gt;博客源文件目录下&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote &amp;quot;github&amp;quot;]
	url = git@github.com:HuaienYao/hugo-blog-backup.git
	fetch = +refs/heads/*:refs/remotes/github/*
[branch &amp;quot;master&amp;quot;]
	remote = github
    remote = coding
	merge = refs/heads/master
[remote &amp;quot;coding&amp;quot;]
	url = git@git.dev.tencent.com:Wyane/hugoblogbackup.git
	fetch = +refs/heads/*:refs/remotes/coding/*

[submodule &amp;quot;themes/hugo-swift-theme&amp;quot;]
	url = https://github.com/onweru/hugo-swift-theme.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;public目录下&#34;&gt;public目录下&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote &amp;quot;coding&amp;quot;]
	url = git@git.dev.tencent.com:Wyane/Hugoblog.git
	fetch = +refs/heads/*:refs/remotes/coding/*
[branch &amp;quot;master&amp;quot;]
	remote = coding
    remote = github
	merge = refs/heads/master
[remote &amp;quot;github&amp;quot;]
	url = git@github.com:HuaienYao/HuaienYao.github.io.git
	fetch = +refs/heads/*:refs/remotes/github/*

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-测试一下&#34;&gt;3. 测试一下&lt;/h3&gt;

&lt;p&gt;可以通过执行上面最初的一键部署脚本来测试下部署是否可以成功，当然在这前你必须得在相关平台上添加好SSH公钥。
具体可以参考下面
&lt;a href=&#34;https://huaien.co/technology/ssh-key-generator-git/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Git生成 SSH 公钥添加到GitHub和Coding.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果测试没问题就可以使用上面的一键部署脚本来部署博客了，不过也可以用手动输入git命令来同步部署。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo添加Valine评论系统 以LeaveIt主题为例</title>
      <link>https://huaien.co/technology/valine-to-hugo-with-leaveit/</link>
      <pubDate>Fri, 19 Apr 2019 09:56:14 +0900</pubDate>
      
      <guid>https://huaien.co/technology/valine-to-hugo-with-leaveit/</guid>
      <description>&lt;p&gt;最近将博客的生成器由Hexo转回到Hugo了，在这之后选了一些主题，试过Even,Jane,mainroad等等，最后还是选了v2上有人发布的这个LeaveIt主题。主要是因为这个主题简洁又不缺乏华丽的感觉。不过有点不足的是这个主题并不能直接用评论系统，在查看了相关教程之后，终于添加了原来使用的Valine评论系统。&lt;/p&gt;

&lt;p&gt;今天参考了Even主题和Jane主题的源码，并且看了@5km的教程，尝试了好久，一直无法添加成功，最后在该教程的评论区，有其他人请教了和我一样的主题的问题，最后通过@5km的解答，终于成功实现了Valine评论系统的添加。&lt;/p&gt;

&lt;h2 id=&#34;方法1-只加入valine&#34;&gt;方法1：只加入Valine&lt;/h2&gt;

&lt;p&gt;由于LeaveIt主题并没有自带任何一个评论系统，所以如果只要Valine评论就直接修改下面文件即可。&lt;/p&gt;

&lt;h3 id=&#34;修改站点配置文件&#34;&gt;修改站点配置文件&lt;/h3&gt;

&lt;p&gt;首先先在站点的配置文件&lt;code&gt;config.toml&lt;/code&gt;里面添加下面的配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;  # Valine.
  # You can get your appid and appkey from https://leancloud.cn
  # more info please open https://valine.js.org
  [params.valine]
    enable = true #开关
    appId = &#39;你的appId&#39;
    appKey = &#39;你的appKey&#39;
    notify = false  # mail notifier , https://github.com/xCss/Valine/wiki
    verify = false # Verification code
    avatar = &#39;mp&#39; #神秘人(一个灰白头像) 
    placeholder = &#39;说点什么吧...&#39; #在评论框显示的温馨提示等
    visitor = true #访问量统计
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-主题的文章页模板添加valine&#34;&gt;2.主题的文章页模板添加Valine&lt;/h3&gt;

&lt;p&gt;另外在LeaveIt的主题下的 &lt;code&gt;layouts/_default/single.html&lt;/code&gt; 找到第97行的 &lt;code&gt;&amp;lt;div class=&amp;quot;post-comment&amp;quot;&amp;gt;&lt;/code&gt; 代码块中的判断Disqus略称后的 &lt;code&gt;{{ end }}&lt;/code&gt; 后面，插入Valine代码，插入后的效果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; &amp;lt;div class=&amp;quot;post-comment&amp;quot;&amp;gt;
       {{ if ( .Params.showComments | default true ) }}
             {{ if ne .Site.DisqusShortname &amp;quot;&amp;quot; }}
                 {{ template &amp;quot;_internal/disqus.html&amp;quot; . }}
             {{ end }}
             &amp;lt;!-- valine --&amp;gt;
             {{- if .Site.Params.valine.enable -}}
             &amp;lt;!-- id 将作为查询条件 --&amp;gt;
             &amp;lt;span id=&amp;quot;{{ .URL | relURL }}&amp;quot; class=&amp;quot;leancloud_visitors&amp;quot; data-flag-title=&amp;quot;{{ .Title }}&amp;quot;&amp;gt;
                 &amp;lt;span class=&amp;quot;post-meta-item-text&amp;quot;&amp;gt;访问量 &amp;lt;/span&amp;gt;
                 &amp;lt;span class=&amp;quot;leancloud-visitors-count&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
                 &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
             &amp;lt;/span&amp;gt;
             &amp;lt;div id=&amp;quot;vcomments&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
             &amp;lt;script src=&amp;quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
             &amp;lt;script src=&#39;//unpkg.com/valine/dist/Valine.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
             &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
                 new Valine({
                     el: &#39;#vcomments&#39; ,
                     appId: &#39;{{ .Site.Params.valine.appId }}&#39;,
                     appKey: &#39;{{ .Site.Params.valine.appKey }}&#39;,
                     notify: {{ .Site.Params.valine.notify }},
                     verify: {{ .Site.Params.valine.verify }},
                     avatar:&#39;{{ .Site.Params.valine.avatar }}&#39;,
                     placeholder: &#39;{{ .Site.Params.valine.placeholder }}&#39;,
                     visitor: {{ .Site.Params.valine.visitor }}
                 });
             &amp;lt;/script&amp;gt;
             {{- end }}
       {{ end }}
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实这样已经可以实现了。回到博客文章下方就可以看到已经显示出来了。当然前提是你已经配置好过Valine了，就是在Leancloud上注册等等。相关可以查看&lt;a href=&#34;https://valine.js.org/quickstart.html&#34; title=&#34;Valine官方文档&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Valine官方文档&lt;/a&gt;。
&lt;img src=&#34;https://ww1.sinaimg.cn/large/007i4MEmgy1g27o6azai0j30m30dzweo.jpg&#34; alt=&#34;Valine已经可以用了&#34; title=&#34;Valine已经可以用了&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;方法2-同时加入多个评论系统的配置&#34;&gt;方法2：同时加入多个评论系统的配置&lt;/h2&gt;

&lt;p&gt;这样是很多主题的做法，为了方便切换评论系统直接内置多个评论系统，这样做的话可以直接在站点配置文件里面修改即可使用。&lt;/p&gt;

&lt;h3 id=&#34;1-主题模板下新建comments-html&#34;&gt;1.主题模板下新建comments.html&lt;/h3&gt;

&lt;p&gt;在LeaveIt主题的/themes/LeaveIt/layouts/partials下新建comments.html模板（如有，则不需新建，直接修改内容即可。）在comments.html里面添加下面的内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if and .IsPage (ne .Params.comment false) -}}
  &amp;lt;!-- valine --&amp;gt;
  {{- if .Site.Params.valine.enable -}}
  &amp;lt;!-- id 将作为查询条件 --&amp;gt;
  &amp;lt;span id=&amp;quot;{{ .URL | relURL }}&amp;quot; class=&amp;quot;leancloud_visitors&amp;quot; data-flag-title=&amp;quot;{{ .Title }}&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;post-meta-item-text&amp;quot;&amp;gt;阅读量 &amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;leancloud-visitors-count&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;div id=&amp;quot;vcomments&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;script src=&amp;quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&#39;//unpkg.com/valine/dist/Valine.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    new Valine({
        el: &#39;#vcomments&#39; ,
        appId: &#39;{{ .Site.Params.valine.appId }}&#39;,
        appKey: &#39;{{ .Site.Params.valine.appKey }}&#39;,
        notify: {{ .Site.Params.valine.notify }}, 
        verify: {{ .Site.Params.valine.verify }}, 
        avatar:&#39;{{ .Site.Params.valine.avatar }}&#39;, 
        placeholder: &#39;{{ .Site.Params.valine.placeholder }}&#39;,
        visitor: &#39;{{ .Site.Params.valine.visitor }}&#39;
    });
  &amp;lt;/script&amp;gt;
  {{- end }}

  &amp;lt;!-- Disqus --&amp;gt;
  {{- if .Site.DisqusShortname -}}
    &amp;lt;div id=&amp;quot;disqus_thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    (function() {
      // Don&#39;t ever inject Disqus on localhost--it creates unwanted
      // discussions from &#39;localhost:1313&#39; on your Disqus account...
      if (window.location.hostname === &#39;localhost&#39;) return;
      var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
      var disqus_shortname = &#39;{{ .Site.DisqusShortname }}&#39;;
      dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
      (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
    })();
    &amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
  {{- end -}}

  &amp;lt;!-- changyan --&amp;gt;
  {{- if and .Site.Params.changyanAppid .Site.Params.changyanAppkey -}}
    &amp;lt;div id=&amp;quot;SOHUCS&amp;quot; sid=&amp;quot;{{ .URL }}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    (function(){
      if (window.location.hostname === &#39;localhost&#39;) return;
      var appid = &#39;{{ .Site.Params.changyanAppid }}&#39;;
      var conf = &#39;{{ .Site.Params.changyanAppkey }}&#39;;
      var width = window.innerWidth || document.documentElement.clientWidth; 
      if (width &amp;lt; 960) {window.document.write(&#39;&amp;lt;script id=&amp;quot;changyan_mobile_js&amp;quot; charset=&amp;quot;utf-8&amp;quot; type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=&#39; + appid + &#39;&amp;amp;conf=&#39; + conf + &#39;&amp;quot;&amp;gt;&amp;lt;\/script&amp;gt;&#39;); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(&amp;quot;head&amp;quot;)[0]||document.head||document.documentElement;var b=document.createElement(&amp;quot;script&amp;quot;);b.setAttribute(&amp;quot;type&amp;quot;,&amp;quot;text/javascript&amp;quot;);b.setAttribute(&amp;quot;charset&amp;quot;,&amp;quot;UTF-8&amp;quot;);b.setAttribute(&amp;quot;src&amp;quot;,d);if(typeof a===&amp;quot;function&amp;quot;){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===&amp;quot;loaded&amp;quot;||e===&amp;quot;complete&amp;quot;){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(&amp;quot;https://changyan.sohu.com/upload/changyan.js&amp;quot;,function(){window.changyan.api.config({appid:appid,conf:conf})}); }
    })();
    &amp;lt;/script&amp;gt;
  {{- end -}}

  &amp;lt;!-- LiveRe --&amp;gt;
  {{- if .Site.Params.livereUID -}}
    &amp;lt;div id=&amp;quot;lv-container&amp;quot; data-id=&amp;quot;city&amp;quot; data-uid=&amp;quot;{{ .Site.Params.livereUID }}&amp;quot;&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      (function(d, s) {
        var j, e = d.getElementsByTagName(s)[0];
        if (typeof LivereTower === &#39;function&#39;) { return; }
        j = d.createElement(s);
        j.src = &#39;https://cdn-city.livere.com/js/embed.dist.js&#39;;
        j.async = true;
        e.parentNode.insertBefore(j, e);
      })(document, &#39;script&#39;);
    &amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;Please enable JavaScript to view the comments powered by &amp;lt;a href=&amp;quot;https://livere.com/&amp;quot;&amp;gt;LiveRe.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
  {{- end -}}

  &amp;lt;!-- gitment --&amp;gt;
  {{- if .Site.Params.gitment.owner -}}
    &amp;lt;div id=&amp;quot;comments-gitment&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/gitment@0.0.3/style/default.min.css&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/gitment@0.0.3/dist/gitment.browser.min.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      var gitment = new Gitment({
        id: &#39;{{ .Date }}&#39;,
        title: &#39;{{ .Title }}&#39;,
        link: decodeURI(location.href),
        desc: &#39;{{ .Summary }}&#39;,
        owner: &#39;{{ .Site.Params.gitment.owner }}&#39;,
        repo: &#39;{{ .Site.Params.gitment.repo }}&#39;,
        oauth: {
          client_id: &#39;{{ .Site.Params.gitment.clientId }}&#39;,
          client_secret: &#39;{{ .Site.Params.gitment.clientSecret }}&#39;
        }
      });
      gitment.render(&#39;comments-gitment&#39;);
    &amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;https://github.com/imsun/gitment&amp;quot;&amp;gt;comments powered by gitment.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
  {{- end -}}

  &amp;lt;!-- gitalk --&amp;gt;
  {{- if .Site.Params.gitalk.owner -}}
    &amp;lt;div id=&amp;quot;gitalk-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      var gitalk = new Gitalk({
        id: &#39;{{ .Date }}&#39;,
        title: &#39;{{ .Title }}&#39;,
        clientID: &#39;{{ .Site.Params.gitalk.clientId }}&#39;,
        clientSecret: &#39;{{ .Site.Params.gitalk.clientSecret }}&#39;,
        repo: &#39;{{ .Site.Params.gitalk.repo }}&#39;,
        owner: &#39;{{ .Site.Params.gitalk.owner }}&#39;,
        admin: [&#39;{{ .Site.Params.gitalk.owner }}&#39;],
        body: decodeURI(location.href)
      });
      gitalk.render(&#39;gitalk-container&#39;);
    &amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;https://github.com/gitalk/gitalk&amp;quot;&amp;gt;comments powered by gitalk.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
  {{- end }}

{{- end }}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-在文章页模板中调用上面新建的评论模板&#34;&gt;2.在文章页模板中调用上面新建的评论模板&lt;/h3&gt;

&lt;p&gt;例如本站用的LeaveIt主题是在&lt;code&gt;layouts/_default/single.html&lt;/code&gt; 找到第97行的&lt;code&gt;&amp;lt;div class=&amp;quot;post-comment&amp;quot;&amp;gt;&lt;/code&gt; 代码块中的判断Disqus略称后的 &lt;code&gt;{{ end }}&lt;/code&gt;后面，插入调用代码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ partial &amp;quot;comments.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实就是方法1的第二步，只是方法一是直接将评论代码加到文章页模板中，而这个是将评论代码统统放在comments.html模板下，再在文章页模板通过代码调用这个comments.html，只要站点配置文件config.toml里面存在相关开关配置，则评论系统就会被正常调用。&lt;/p&gt;

&lt;p&gt;方法二参考的是其他的主题Even等，Valine评论系统是可以正常被调用，但是其他的没有测试过。&lt;/p&gt;

&lt;h2 id=&#34;参考来源&#34;&gt;参考来源&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.smslit.top/2018/07/08/hugo-valine/&#34; title=&#34;hugo博客添加评论系统Valine&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;hugo博客添加评论系统Valine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://valine.js.org/quickstart.html&#34; title=&#34;Valine官方文档&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Valine官方文档&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>手滑导致设置git remote仓库错误 如何修改远程仓库地址配置</title>
      <link>https://huaien.co/technology/change-git-remote-config/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/change-git-remote-config/</guid>
      <description>&lt;p&gt;本文记录了如何修改git remote配置的远程仓库地址。在不小心设置错误git remote地址时可以用这个方法修改为正确的远程仓库地址配置。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;在同步github仓库的时候手滑了导致设置的git remote地址出错了。然后又添加了一下提示错误。
记录一下如何修改&lt;/p&gt;

&lt;p&gt;在指定远程仓库的时候输入错误导致设置了错误的远程仓库，直接重新用下面的命令会提示错误&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git remote add origin git@github.com:github帐号名/仓库名.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提示已经存在的出错信息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: remote origin already exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解决办法&#34;&gt;解决办法&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 删除错误的远程仓库配置
$ git remote rm origin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 重新输入正确的远程仓库配置
$ git remote add origin git@github.com:github帐号名/仓库名.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就不会提示已经存在的错误了&lt;/p&gt;

&lt;p&gt;但是如果输入&lt;code&gt;$ git remote rm origin&lt;/code&gt; 还是报错&lt;code&gt;error: Could not remove config section &#39;remote.origin&#39;.&lt;/code&gt;的话，就需要修改gitconfig文件的内容。&lt;/p&gt;

&lt;p&gt;到你的github的安装路径下的etc文件夹，找到一个名为gitconfig的文件，打开它把里面的[remote &amp;ldquo;origin&amp;rdquo;]那一行删除就可以了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;参考来源：&lt;a href=&#34;https://blog.csdn.net/dengjianqiang2011/article/details/9260435&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/dengjianqiang2011/article/details/9260435&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Disqus提示无法加载的解决办法</title>
      <link>https://huaien.co/technology/disqus-error-to-load/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/disqus-error-to-load/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/HTB1c6O0X6vuK1Rjy0Faq6x2aVXaB.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;错误提示&#34;&gt;错误提示：&lt;/h3&gt;

&lt;p&gt;Disqus 无法加载。如果您是管理员，请参阅故障排除指南。&lt;/p&gt;

&lt;p&gt;We were unable to load Disqus. If you are a moderator please see our troubleshooting guide.&lt;/p&gt;

&lt;h3 id=&#34;解决方法&#34;&gt;解决方法：&lt;/h3&gt;

&lt;p&gt;在hexo中的根目录下的_config.yml文件中，这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;# URL
## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;
url: https://www.nihoncard.com
root: /
permalink: :category/:title.html
permalink_defaults:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;url: 处需要设置为带http的完整的链接。我原来写的是&lt;code&gt;/&lt;/code&gt;就会出现以上错误。改了之后就好了。&lt;/p&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考：&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/edcc22f6cf33&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.jianshu.com/p/edcc22f6cf33&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>