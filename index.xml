<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wyane&#39;s Blog on Wyane&#39;s Blog</title>
    <link>https://huaien.co/</link>
    <description>Recent content in Wyane&#39;s Blog on Wyane&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 31 Jul 2019 05:18:22 +0000</lastBuildDate>
    <atom:link href="https://huaien.co/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo的LeaveIt主题优化记录二-添加字数统计,阅读时间,放大图片</title>
      <link>https://huaien.co/technology/hugo-leaveit-theme-update-logs/</link>
      <pubDate>Wed, 31 Jul 2019 05:18:22 +0000</pubDate>
      
      <guid>https://huaien.co/technology/hugo-leaveit-theme-update-logs/</guid>
      <description>

&lt;h2 id=&#34;添加字数统计-阅读时间&#34;&gt;添加字数统计,阅读时间&lt;/h2&gt;

&lt;p&gt;原文章标题下的分类目录等的样式是下面图片的样子。图片截图于主题&lt;a href=&#34;https://liuzhichao.com/2018/hugo-theme-leaveit/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;原作者博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/Hc1715da2ca7c43d9b64791b16b8a97d8I.jpg&#34; alt=&#34;截自主题原作者博客&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在添加了字数统计和阅读时间后，将排版改成下面这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H0199dad846c04a20a55014a76bc46759K.jpg&#34; alt=&#34;新的样式&#34; /&gt;&lt;/p&gt;

&lt;p&gt;直接放相关代码&lt;/p&gt;

&lt;h3 id=&#34;导入font-awesome的cdn地址&#34;&gt;导入font awesome的cdn地址&lt;/h3&gt;

&lt;p&gt;在主题目录的&lt;code&gt;/LeaveIt/layouts/partials/head.html&lt;/code&gt;的 &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt;标签前(为了方便查看建议在原有的  &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;标签后)加入下面代码，以加入font awesome  5.9.0版本为例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&amp;quot;//use.fontawesome.com/releases/v5.9.0/css/all.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;修改文章页面的排版&#34;&gt;修改文章页面的排版&lt;/h3&gt;

&lt;p&gt;修改主题目录下的&lt;code&gt;/LeaveIt/layouts/_default/single.html&lt;/code&gt;文件，将第7行开始的下面的代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;                Written by &amp;lt;a itemprop=&amp;quot;name&amp;quot; href=&amp;quot;{{.Site.BaseURL }}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;{{ if isset .Params &amp;quot;author&amp;quot; }}{{ .Params.author }}{{ else }}{{ .Site.Params.author }}{{ end }}&amp;lt;/a&amp;gt; with ♥ 
                &amp;lt;span class=&amp;quot;post-time&amp;quot;&amp;gt;
                on &amp;lt;time datetime={{.Date.Format (.Site.Params.dateFormatToUse | default &amp;quot;2006-01-02&amp;quot;) }} itemprop=&amp;quot;datePublished&amp;quot;&amp;gt;{{ .Date.Format (.Site.Params.dateFormatToUse | default &amp;quot;January 2, 2006&amp;quot;) }}&amp;lt;/time&amp;gt;
                &amp;lt;/span&amp;gt;
                in
                {{ with .Params.categories -}}
                &amp;lt;i class=&amp;quot;iconfont icon-folder&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;span class=&amp;quot;post-category&amp;quot;&amp;gt;
                        {{ range . }}
                        {{- $name := . -}}
                        {{- with $.Site.GetPage &amp;quot;taxonomy&amp;quot; (printf &amp;quot;categories/%s&amp;quot; $name) | default ($.Site.GetPage &amp;quot;taxonomy&amp;quot; (printf &amp;quot;categories/%s&amp;quot; ($name | urlize))) -}}
                          &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt; {{ $name }} &amp;lt;/a&amp;gt;
                        {{ end -}}
                        {{ end }}
                &amp;lt;/span&amp;gt;
                {{- end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;            {{ with .Params.categories -}}
          &amp;lt;i class=&amp;quot;far fa-folder-open&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;span class=&amp;quot;post-category&amp;quot;&amp;gt;
                        {{ range . }}
                        {{- $name := . -}}
                        {{- with $.Site.GetPage &amp;quot;taxonomy&amp;quot; (printf &amp;quot;categories/%s&amp;quot; $name) | default ($.Site.GetPage &amp;quot;taxonomy&amp;quot; (printf &amp;quot;categories/%s&amp;quot; ($name | urlize))) -}}
                          &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt; {{ $name }} &amp;lt;/a&amp;gt;
                        {{ end -}}
                        {{ end }}
                &amp;lt;/span&amp;gt;
            {{- end }}
          &amp;lt;span class=&amp;quot;post-time&amp;quot;&amp;gt;
         &amp;lt;i class=&amp;quot;far fa-calendar-alt&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;  &amp;lt;time datetime={{.Date.Format (.Site.Params.dateFormatToUse | default &amp;quot;2006-01-02&amp;quot;) }} itemprop=&amp;quot;datePublished&amp;quot;&amp;gt;{{ .Date.Format (.Site.Params.dateFormatToUse | default &amp;quot;2006-01-02&amp;quot;) }}&amp;lt;/time&amp;gt;
           &amp;lt;/span&amp;gt;
         &amp;lt;i class=&amp;quot;far fa-file-word&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;span class=&amp;quot;post-word-count&amp;quot;&amp;gt; {{ .WordCount }} 字&amp;lt;/span&amp;gt;
         &amp;lt;i class=&amp;quot;far fa-clock&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;span class=&amp;quot;more-meta&amp;quot;&amp;gt; {{ .ReadingTime }} 分钟&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就修改成了上图的排版，添加了字数统计及阅读时间。以及添加了几个font awesome的图标。使得比较简单点。
不过用了字数统计，就需要在站点配置文件config.toml里面添加一个配置，表示网站内容包含中文，日语，韩文。可以更准确的统计字数。(或者在文章的frontmatter内单独添加这个配置应该也行的)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hasCJKLanguage = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;放大文章内图片显示&#34;&gt;放大文章内图片显示&lt;/h2&gt;

&lt;p&gt;LeaveIt主题内置了LightGallery灯箱效果，所以图片原状态是比较小，需要点击才能放大，但是通过添加下面的代码就可以让图片放大显示，对眼睛舒服点。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;assets/css/_custom.scss&lt;/code&gt; 中添加下面代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	.post-warp .post-content img {
  		max-width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo的LeaveIt主题优化记录一-修复错位，添加toc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/valine-to-hugo-with-leaveit/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo添加Valine评论系统 以LeaveIt主题为例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/install-ruby-update-on-centos/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Centos下安装和升级Ruby和sass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考文章&#34;&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.me/2018/025/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Leavelt 主题优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Centos安装和升级Ruby和sass</title>
      <link>https://huaien.co/technology/install-ruby-update-on-centos/</link>
      <pubDate>Wed, 31 Jul 2019 04:59:52 +0000</pubDate>
      
      <guid>https://huaien.co/technology/install-ruby-update-on-centos/</guid>
      <description>&lt;h2 id=&#34;安装ruby&#34;&gt;安装Ruby&lt;/h2&gt;

&lt;p&gt;Centos下在线安装Ruby,版本可能比较旧&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后可以通过&lt;code&gt;ruby -v&lt;/code&gt;来查看版本&lt;/p&gt;

&lt;h2 id=&#34;rvm升级ruby&#34;&gt;RVM升级Ruby&lt;/h2&gt;

&lt;p&gt;如果版本太低了，可以听过RVM来升级Ruby&lt;/p&gt;

&lt;p&gt;什么是RVM？
&amp;gt; RAM（Ruby Version Manager ）是一款RAM的命令行工具，可以使用RAM轻松安装，管理Ruby版本。RVM包含了Ruby的版本管理和Gem库管理(gemset)&lt;/p&gt;

&lt;p&gt;可以通过以下命令来安装RVM&lt;/p&gt;

&lt;p&gt;先安装GPG keys:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再安装RVM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\curl -sSL https://get.rvm.io | bash -s stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果需要在安装RVM的同时安装Ruby 和 Rails 的话用下面的命令:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;\curl -sSL https://get.rvm.io | bash -s stable --rails
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后需要更新配置文件，来使其生效&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source /etc/profile.d/rvm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着可以通过&lt;code&gt;rvm -v&lt;/code&gt;来查看RVM版本信息，如果可以代表安装成功。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host ~]# rvm -v
rvm 1.29.9 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行以下命令来查看Ruby版本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rvm list known
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host ~]# rvm list known
# MRI Rubies
[ruby-]1.8.6[-p420]
[ruby-]1.8.7[-head] # security released on head
[ruby-]1.9.1[-p431]
[ruby-]1.9.2[-p330]
[ruby-]1.9.3[-p551]
[ruby-]2.0.0[-p648]
[ruby-]2.1[.10]
[ruby-]2.2[.10]
[ruby-]2.3[.8]
[ruby-]2.4[.6]
[ruby-]2.5[.5]
[ruby-]2.6[.3]
[ruby-]2.7[.0-preview1]
ruby-head

# for forks use: rvm install ruby-head-&amp;lt;name&amp;gt; --url https://github.com/githuby.git --branch 2.2

# JRuby
jruby-1.6[.8]
jruby-1.7[.27]
jruby-9.1[.17.0]
jruby[-9.2.7.0]
jruby-head

# Rubinius
rbx-1[.4.3]
rbx-2.3[.0]
rbx-2.4[.1]
rbx-2[.5.8]
rbx-3[.107]
rbx-4[.3]
rbx-head

# TruffleRuby
truffleruby[-19.1.0]

# Opal
opal

# Minimalistic ruby implementation - ISO 30170:2012
mruby-1.0.0
mruby-1.1.0
mruby-1.2.0
mruby-1.3.0
mruby-1[.4.1]
mruby-2[.0.1]
mruby[-head]

# Ruby Enterprise Edition
ree-1.8.6
ree[-1.8.7][-2012.02]

# Topaz
topaz

# MagLev
maglev-1.0.0
maglev-1.1[RC1]
maglev[-1.2Alpha4]
maglev-head

# Mac OS X Snow Leopard Or Newer
macruby-0.10
macruby-0.11
macruby[-0.12]
macruby-nightly
macruby-head

# IronRuby
ironruby[-1.1.3]
ironruby-head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以通过下面的命令来安装指定版本的Ruby，例如Ruby2.5&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rvm install 2.5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装后可以通过下面的命令来检测是否安装成功&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host ~]# ruby -v
ruby 2.5.5p157 (2019-03-15 revision 67260) [i686-linux]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;添加ruby仓库&#34;&gt;添加ruby仓库&lt;/h2&gt;

&lt;p&gt;如何添加ruby仓库&lt;/p&gt;

&lt;p&gt;添加aliyun镜像并检测Ruby版本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem sources -a http://mirrors.aliyun.com/rubygems/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用rvm安装发现下载缓慢，可以考虑删除原来的仓库地址，只保留阿里云镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem sources --remove https://rubygems.org/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;延伸阅读&#34;&gt;延伸阅读&lt;/h2&gt;

&lt;p&gt;为什么要安装Ruby呢？因为Hugo的这个LeaveIt主题有用到sass编译，但是sass编译需要安装sass，&lt;/p&gt;

&lt;p&gt;因为以上安装了Ruby，所以可以通过 gem安装sass。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install sass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后用命令查看版本，看是否安装成功&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host ~]# sass -v
Ruby Sass 3.7.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示sass安装成功后，我们每次在修改了LeaveIt主题的样式后都需要执行下面的命令，不然修改的样式没有变化。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sass --style compressed [Leacelt 目录]/assets/css/main.scss:[Leacelt 目录]/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要替换上面的&lt;code&gt;[Leacelt 目录]&lt;/code&gt;，命令执行后就会在LeaveIt主题目录下的&lt;code&gt;/resources/_gen/assets/scss/css/&lt;/code&gt;下更新&lt;code&gt;.content文件&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其实还有另一种方法，你可以直接使用Hugo提供的hugo_extended版本就可以直接编译sass了，不需要另外执行sass编译命令。         可以参考&lt;a href=&#34;https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/#%E5%8E%9F%E5%9B%A0/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo的LeaveIt主题优化记录一-修复错位，添加toc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rvm.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;RVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_26440803/article/details/82717244/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Centos7安装升级Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.me/2018/025/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Leavelt 主题优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://akisnote.com/2018/12/sass-scss/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;簡単！便利！HugoでSass/Scssを使う方法！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sass.hk/install/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;如何安装Sass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Hugo的LeaveIt主题优化记录一-修复错位，添加toc</title>
      <link>https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/</link>
      <pubDate>Mon, 29 Jul 2019 07:42:33 +0000</pubDate>
      
      <guid>https://huaien.co/technology/hugo-leaveit-theme-modified-of-bugs-1/</guid>
      <description>

&lt;h2 id=&#34;标签处的back-home按钮位置错位&#34;&gt;标签处的back・home按钮位置错位&lt;/h2&gt;

&lt;p&gt;这个问题我现在才发现，原来是因为这个主题在生成静态文件的时候需要sass编译。难怪我每次修改&lt;code&gt;/themes/LeaveIt/assets/css/&lt;/code&gt;下面的样式总不见效果。后来一直直接修改的站点目录下的/resources/_gen/assets/scss/css/XXX.content文件才会看到修改的效果。直到今天，我发现原来普通版本的hugo是不支持sass编译的，查看了这个&lt;a href=&#34;https://github.com/liuzc/LeaveIt/issues/14/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;#14 Issue&lt;/a&gt;才知道原来要用hugo extended版本才可以编译sass。
可以从&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo Release页面&lt;/a&gt;下载该版本。&lt;/p&gt;

&lt;h3 id=&#34;原因&#34;&gt;原因&lt;/h3&gt;

&lt;p&gt;其实就是&lt;code&gt;/themes/LeaveIt/assets/css/_common/_page/post.scss&lt;/code&gt;样式表的&lt;code&gt;.post-tags&lt;/code&gt;样式问题，这个文件里的&lt;code&gt;.post-tags&lt;/code&gt;样式应该是正常的，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    .post-tags {
        padding: 1rem 0 1rem;
        display: flex;
        justify-content: space-between;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而主题目录自带的&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content&lt;/code&gt;里的&lt;code&gt;.post-tags&lt;/code&gt;样式却是不一样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/H39fd4ba308524a4cb510f832b7753b8fl.jpg&#34; alt=&#34;原作者github主题截图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/liuzc/LeaveIt/blob/master/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;点此&lt;/a&gt;进入相关页面。&lt;/p&gt;

&lt;p&gt;原因就在于作者生成的&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content&lt;/code&gt;里的&lt;code&gt;.post-tags&lt;/code&gt;样式是错误的，正常应该在使用&lt;code&gt;hugo&lt;/code&gt;命令生成静态页面的时候会通过sass编译重新生成&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content&lt;/code&gt;文件，但是由于我用的版本不是&lt;code&gt;hugo_extend&lt;/code&gt;版本，所以每次生成静态页面都导致在 &lt;code&gt;/themes/LeaveIt/assets/css/_common/_page/post.scss&lt;/code&gt; 里面修改的都不能更新到&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/main.scss_b95b077eb505d5c0aff8055eaced30ad.content&lt;/code&gt;所以没有效果。&lt;/p&gt;

&lt;h3 id=&#34;解决方法&#34;&gt;解决方法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;使用支持sass编译的&lt;a href=&#34;https://github.com/gohugoio/hugo/releases//&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;hugo extend版本&lt;/a&gt;，就可以通过修改&lt;code&gt;/themes/LeaveIt/assets/css/_common/_page/post.scss&lt;/code&gt;来实现效果。&lt;/li&gt;
&lt;li&gt;使用普通的不支持sass编译的hugo版本，这样需要直接修改&lt;code&gt;LeaveIt/resources/_gen/assets/scss/css/&lt;/code&gt;下的.content文件，这样的话修改&lt;code&gt;/themes/LeaveIt/assets/css/&lt;/code&gt;下的文件均无法直接反应效果。&lt;/li&gt;
&lt;li&gt;使用普通的不支持sass编译的hugo版本，在修改样式后，需要使用sass命令来编译生成一下.content文件，具体可以参考&lt;a href=&#34;https://huaien.co/technology/install-ruby-update-on-centos/#延伸阅读&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;文章页添加toc目录支持&#34;&gt;文章页添加TOC目录支持&lt;/h2&gt;

&lt;p&gt;原版的LeaveIt主题没有很好的支持TOC文章目录导航，但是@&lt;a href=&#34;https://github.com/ehlxr/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ehlxr&lt;/a&gt; 在Github提交了&lt;a href=&#34;https://github.com/liuzc/LeaveIt/pull/11/commits&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;相关pull请求&lt;/a&gt; 根据这个成功添加了TOC目录支持。&lt;/p&gt;

&lt;p&gt;1，在&lt;code&gt;/themes/LeaveIt/assets/css/_custom.scss&lt;/code&gt;中添加下面的toc样式，可以根据自己的喜好自定义修改。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.post-toc {
    position: absolute;
    width: 200px;
    margin-left: 780px;
    padding: 10px;
    word-wrap: break-word;
    box-sizing: border-box;

    .post-toc-title {
        margin: 0;
        font-weight: 400;
        text-transform: uppercase;
    }

    .post-toc-content {
        &amp;amp;.always-active ul {
            display: block;
        }

        &amp;gt;nav&amp;gt;ul {
            margin: 10px 0;
        }

        ul {
            padding-left: 0;
            list-style: none;

            ul {
            padding-left: 15px;
            display: none;
            }

            .has-active &amp;gt; ul {
                display: block;
            }
        }
    }

    a:hover {
        color: #c05b4d;
        -webkit-transform: scale(1.1);
        -ms-transform: scale(1.1);
        transform: scale(1.1);
    }

    a {
        display: block;
        line-height: 30px;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        -webkit-transition-duration: .2s;
        transition-duration: .2s;
        -webkit-transition-property: -webkit-transform;
        transition-property: -webkit-transform;
        transition-property: transform;
        transition-property: transform,-webkit-transform;
        -webkit-transition-timing-function: ease-out;
        transition-timing-function: ease-out;
    }
}

@media only screen and (max-width: 1224px) {
    .post-toc {
        display: none;
    }
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;/themes/LeaveIt/layouts/partials/&lt;/code&gt;下新建&lt;code&gt;toc.html&lt;/code&gt;文件，内容为下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;post-toc&amp;quot; id=&amp;quot;post-toc&amp;quot;&amp;gt;
  &amp;lt;h2 class=&amp;quot;post-toc-title&amp;quot;&amp;gt;{{ T &amp;quot;toc&amp;quot; }}&amp;lt;/h2&amp;gt;
  {{ $globalAutoCollapseToc := .Site.Params.autoCollapseToc | default false }}
  &amp;lt;div class=&amp;quot;post-toc-content{{ if not (or .Params.autoCollapseToc (and $globalAutoCollapseToc (ne .Params.autoCollapseToc false))) }} always-active{{ end }}&amp;quot;&amp;gt;
    {{.TableOfContents}}
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  window.onload = function () {
    var fix = $(&#39;.post-toc&#39;);
    var end = $(&#39;.post-comment&#39;);
    var fixTop = fix.offset().top, fixHeight = fix.height();
    var endTop, miss;
    var offsetTop = fix[0].offsetTop;
    $(window).scroll(function () {
      var docTop = Math.max(document.body.scrollTop, document.documentElement.scrollTop);
      if (end.length &amp;gt; 0) {
        endTop = end.offset().top;
        miss = endTop - docTop - fixHeight;
      }
      if (fixTop &amp;lt; docTop) {
        fix.css({ &#39;position&#39;: &#39;fixed&#39; });
        if ((end.length &amp;gt; 0) &amp;amp;&amp;amp; (endTop &amp;lt; (docTop + fixHeight))) {
          fix.css({ top: miss });
        } else {
          fix.css({ top: 0 });
        }
      } else {
        fix.css({ &#39;position&#39;: &#39;absolute&#39; });
        fix.css({ top: offsetTop });
      }
    })
  }
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在文章页的模板&lt;code&gt;/themes/LeaveIt/layouts/_default/single.html&lt;/code&gt;中 &lt;code&gt;&amp;lt;/header&amp;gt;&lt;/code&gt;标签后引入TOC模板&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;	{{ if ( .Site.Params.toc | default true ) }}
          {{ partial &amp;quot;toc.html&amp;quot; . }}
	{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加后重新使用hugo来生成静态页面，可以在文章页查看到已经有toc目录导航了。当然前提是你得在编辑文章的时候使用到 h1，h2等标题样式。&lt;/p&gt;

&lt;p&gt;最后站点的配置文件&lt;code&gt;config.toml&lt;/code&gt;添加以下配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;toc = true                # 是否开启目录
autoCollapseToc = true   # Auto expand and collapse toc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;放大文章内图片显示&#34;&gt;放大文章内图片显示&lt;/h2&gt;

&lt;p&gt;LeaveIt主题内置了LightGallery灯箱效果，所以图片原状态是比较小，需要点击才能放大，但是通过添加下面的代码就可以让图片放大显示，对眼睛舒服点。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;assets/css/_custom.scss&lt;/code&gt; 中添加下面代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;	.post-warp .post-content img {
  		max-width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/valine-to-hugo-with-leaveit/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo添加Valine评论系统 以LeaveIt主题为例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://huaien.co/technology/install-ruby-update-on-centos/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Centos下安装和升级Ruby和sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mogeko.me/2018/025/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Leavelt 主题优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>一键备份博客源文件与发布文章到Github和Coding</title>
      <link>https://huaien.co/technology/one-click-script-deploy-hugo/</link>
      <pubDate>Thu, 25 Jul 2019 14:58:47 +0800</pubDate>
      
      <guid>https://huaien.co/technology/one-click-script-deploy-hugo/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;经过一番折腾，利用shell脚本来实现更新文章后的一键备份博客源文件及发布文章到Github和Coding两个平台。&lt;/p&gt;

&lt;p&gt;在服务器博客主目录下新建一个文件，名为deploy.sh，将下面的脚本代码复制到新建的deploy.sh文件内。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@host huaien.co]# touch deploy.sh
[root@host huaien.co]# vi deploy.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原先的版本是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
echo &amp;quot;............................&amp;quot;
echo &amp;quot;.开始执行文章发布更新与同步.&amp;quot;
echo &amp;quot;............................&amp;quot;

echo &amp;quot;进入博客主目录 /www/wwwroot/blog/huaien.co&amp;quot;
cd /www/wwwroot/blog/huaien.co

echo &amp;quot;检测上级目录tmp是否已有今日日期的目录，如有，改名为今日日期时分秒&amp;quot;
mv ../tmp/$(date +%Y%m%d)/ ../tmp/$(date +%Y%m%d%H%M%S)/

echo &amp;quot;在上级目录的tmp/下新建今日日期的目录&amp;quot;
mkdir ../tmp/$(date +%Y%m%d)/
mkdir ../tmp/$(date +%Y%m%d)/huaien.co/

echo &amp;quot;备份博客主目录下的.git目录至上级目录的tmp/今日日期/huaien.co/&amp;quot;
cp -rv .git deploy_backupblog.sh deploy config.toml ../tmp/$(date +%Y%m%d)/huaien.co/

echo &amp;quot;备份移动当前以后public目录至上级目录的tmp/今日日期/public/&amp;quot;
mv -v public ../tmp/$(date +%Y%m%d)/public

echo &amp;quot;生成博客内容 #会在博客主目录下生成public目录&amp;quot;
hugo

echo &amp;quot;复制备份好的原public目录下的.git目录至新生成的public目录下&amp;quot;
cp -rv ../tmp/$(date +%Y%m%d)/public/.git ../tmp/$(date +%Y%m%d)/public/CNAME ../tmp/$(date +%Y%m%d)/public/deploy_public.sh  public/

echo &amp;quot;进入public目录&amp;quot;
cd public

echo &amp;quot;-----------------开始将public同步到github和coding仓库---------------------&amp;quot;
git add .
git commit -m &amp;quot;更新博客&amp;quot;
git push -u github master
echo &amp;quot;同步到github仓库完成...&amp;quot;
git push -u coding master
echo &amp;quot;同步到coding仓库完成...&amp;quot;

echo &amp;quot;--------------------------同步public到仓库结束----------------------------&amp;quot;
echo &amp;quot;进入博客主目录&amp;quot;
cd ..
echo &amp;quot;复制原备份文件.git deploy_backupblog.sh config.toml到博客主目录&amp;quot;
cp -rv ../tmp/$(date +%Y%m%d)/huaien.co/.git ../tmp/$(date +%Y%m%d)/huaien.co/deploy_backupblog.sh ../tmp/$(date +%Y%m%d)/huaien.co/config.toml ../tmp/$(date +%Y%m%d)/huaien.co/deploy ./
echo &amp;quot;-----------------开始同步备份博客主目录到github和coding仓库----------------&amp;quot;
git add .
git commit -m &amp;quot;备份博客&amp;quot;
git push -u github master
echo &amp;quot;同步到github仓库完成...&amp;quot;
git push -u coding master
echo &amp;quot;同步到coding仓库完成...&amp;quot;
echo &amp;quot;-------------------------同步博客主目录到仓库结束---------------------------&amp;quot;

echo &amp;quot;................................&amp;quot;
echo &amp;quot;.文章发布更新与同步备份博客结束.&amp;quot;
echo &amp;quot;................................&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于上面这个需要转移.git文件夹等造成效率降低，所以将.git文件夹的备份改为删除除.git文件夹等以外的文件及文件夹。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
echo &amp;quot;............................&amp;quot;
echo &amp;quot;.开始执行文章发布更新与同步.&amp;quot;
echo &amp;quot;............................&amp;quot;

echo &amp;quot;进入博客的public目录 /www/wwwroot/blog/huaien.co/public&amp;quot;
cd /www/wwwroot/blog/huaien.co/public

echo &amp;quot;删除.git,deploy_public.sh以外的文件夹与文件&amp;quot;
ls -a| egrep -v &#39;^.git|deploy_public.sh$&#39; |xargs rm -r

echo &amp;quot;进入博客程序主目录&amp;quot;
cd ..

echo &amp;quot;生成博客内容 #会在博客主目录下生成public目录&amp;quot;
hugo

echo &amp;quot;进入博客的public目录&amp;quot;
cd public

echo &amp;quot;-----------------开始将public同步到github和coding仓库---------------------&amp;quot;
git add .
git commit -m &amp;quot;更新博客&amp;quot;
git push -u github master
echo &amp;quot;同步到github仓库完成...&amp;quot;
git push -u coding master
echo &amp;quot;同步到coding仓库完成...&amp;quot;

echo &amp;quot;--------------------------同步public到仓库结束----------------------------&amp;quot;
echo &amp;quot;进入博客主目录&amp;quot;
cd ..

echo &amp;quot;-----------------开始同步备份博客主目录到github和coding仓库----------------&amp;quot;
git add .
git commit -m &amp;quot;备份博客&amp;quot;
git push -u github master
echo &amp;quot;同步到github仓库完成...&amp;quot;
git push -u coding master
echo &amp;quot;同步到coding仓库完成...&amp;quot;
echo &amp;quot;-------------------------同步博客主目录到仓库结束---------------------------&amp;quot;

echo &amp;quot;................................&amp;quot;
echo &amp;quot;.文章发布更新与同步备份博客结束.&amp;quot;
echo &amp;quot;................................&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;关于双平台同步&#34;&gt;关于双平台同步&lt;/h2&gt;

&lt;p&gt;如何同时同步到Github和Coding平台呢？之前用Hexo的时候都是直接用Hexo的Hexo-deploy插件来同时部署到Github和Coding双平台。但是现在换到Hugo后，都是直接通过修改git的config配置文件来直接部署到相关平台。&lt;/p&gt;

&lt;p&gt;步骤如下&lt;/p&gt;

&lt;h3 id=&#34;1-初始化git&#34;&gt;1. 初始化git&lt;/h3&gt;

&lt;p&gt;在博客的源文件目录和public目录下分别执行下面的 命令以初始化git&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-修改-git文件夹下的config配置文件&#34;&gt;2. 修改.git文件夹下的config配置文件&lt;/h3&gt;

&lt;p&gt;分别修改博客的源文件目录和public目录下生成的.ggit目录下的config配置文件&lt;/p&gt;

&lt;p&gt;附上本博客的配置示例&lt;/p&gt;

&lt;h4 id=&#34;博客源文件目录下&#34;&gt;博客源文件目录下&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote &amp;quot;github&amp;quot;]
	url = git@github.com:HuaienYao/hugo-blog-backup.git
	fetch = +refs/heads/*:refs/remotes/github/*
[branch &amp;quot;master&amp;quot;]
	remote = github
    remote = coding
	merge = refs/heads/master
[remote &amp;quot;coding&amp;quot;]
	url = git@git.dev.tencent.com:Wyane/hugoblogbackup.git
	fetch = +refs/heads/*:refs/remotes/coding/*

[submodule &amp;quot;themes/hugo-swift-theme&amp;quot;]
	url = https://github.com/onweru/hugo-swift-theme.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;public目录下&#34;&gt;public目录下&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote &amp;quot;coding&amp;quot;]
	url = git@git.dev.tencent.com:Wyane/Hugoblog.git
	fetch = +refs/heads/*:refs/remotes/coding/*
[branch &amp;quot;master&amp;quot;]
	remote = coding
    remote = github
	merge = refs/heads/master
[remote &amp;quot;github&amp;quot;]
	url = git@github.com:HuaienYao/HuaienYao.github.io.git
	fetch = +refs/heads/*:refs/remotes/github/*

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-测试一下&#34;&gt;3. 测试一下&lt;/h3&gt;

&lt;p&gt;可以通过执行上面最初的一键部署脚本来测试下部署是否可以成功，当然在这前你必须得在相关平台上添加好SSH公钥。
具体可以参考下面
&lt;a href=&#34;https://huaien.co/technology/ssh-key-generator-git/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Git生成 SSH 公钥添加到GitHub和Coding.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果测试没问题就可以使用上面的一键部署脚本来部署博客了，不过也可以用手动输入git命令来同步部署。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo添加Valine评论系统 以LeaveIt主题为例</title>
      <link>https://huaien.co/technology/valine-to-hugo-with-leaveit/</link>
      <pubDate>Fri, 19 Apr 2019 09:56:14 +0900</pubDate>
      
      <guid>https://huaien.co/technology/valine-to-hugo-with-leaveit/</guid>
      <description>&lt;p&gt;最近将博客的生成器由Hexo转回到Hugo了，在这之后选了一些主题，试过Even,Jane,mainroad等等，最后还是选了v2上有人发布的这个LeaveIt主题。主要是因为这个主题简洁又不缺乏华丽的感觉。不过有点不足的是这个主题并不能直接用评论系统，在查看了相关教程之后，终于添加了原来使用的Valine评论系统。&lt;/p&gt;

&lt;p&gt;今天参考了Even主题和Jane主题的源码，并且看了@5km的教程，尝试了好久，一直无法添加成功，最后在该教程的评论区，有其他人请教了和我一样的主题的问题，最后通过@5km的解答，终于成功实现了Valine评论系统的添加。&lt;/p&gt;

&lt;h2 id=&#34;方法1-只加入valine&#34;&gt;方法1：只加入Valine&lt;/h2&gt;

&lt;p&gt;由于LeaveIt主题并没有自带任何一个评论系统，所以如果只要Valine评论就直接修改下面文件即可。&lt;/p&gt;

&lt;h3 id=&#34;修改站点配置文件&#34;&gt;修改站点配置文件&lt;/h3&gt;

&lt;p&gt;首先先在站点的配置文件&lt;code&gt;config.toml&lt;/code&gt;里面添加下面的配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;  # Valine.
  # You can get your appid and appkey from https://leancloud.cn
  # more info please open https://valine.js.org
  [params.valine]
    enable = true #开关
    appId = &#39;你的appId&#39;
    appKey = &#39;你的appKey&#39;
    notify = false  # mail notifier , https://github.com/xCss/Valine/wiki
    verify = false # Verification code
    avatar = &#39;mp&#39; #神秘人(一个灰白头像) 
    placeholder = &#39;说点什么吧...&#39; #在评论框显示的温馨提示等
    visitor = true #访问量统计
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-主题的文章页模板添加valine&#34;&gt;2.主题的文章页模板添加Valine&lt;/h3&gt;

&lt;p&gt;另外在LeaveIt的主题下的 &lt;code&gt;layouts/_default/single.html&lt;/code&gt; 找到第97行的 &lt;code&gt;&amp;lt;div class=&amp;quot;post-comment&amp;quot;&amp;gt;&lt;/code&gt; 代码块中的判断Disqus略称后的 &lt;code&gt;{{ end }}&lt;/code&gt; 后面，插入Valine代码，插入后的效果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; &amp;lt;div class=&amp;quot;post-comment&amp;quot;&amp;gt;
       {{ if ( .Params.showComments | default true ) }}
             {{ if ne .Site.DisqusShortname &amp;quot;&amp;quot; }}
                 {{ template &amp;quot;_internal/disqus.html&amp;quot; . }}
             {{ end }}
             &amp;lt;!-- valine --&amp;gt;
             {{- if .Site.Params.valine.enable -}}
             &amp;lt;!-- id 将作为查询条件 --&amp;gt;
             &amp;lt;span id=&amp;quot;{{ .URL | relURL }}&amp;quot; class=&amp;quot;leancloud_visitors&amp;quot; data-flag-title=&amp;quot;{{ .Title }}&amp;quot;&amp;gt;
                 &amp;lt;span class=&amp;quot;post-meta-item-text&amp;quot;&amp;gt;访问量 &amp;lt;/span&amp;gt;
                 &amp;lt;span class=&amp;quot;leancloud-visitors-count&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
                 &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
             &amp;lt;/span&amp;gt;
             &amp;lt;div id=&amp;quot;vcomments&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
             &amp;lt;script src=&amp;quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
             &amp;lt;script src=&#39;//unpkg.com/valine/dist/Valine.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
             &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
                 new Valine({
                     el: &#39;#vcomments&#39; ,
                     appId: &#39;{{ .Site.Params.valine.appId }}&#39;,
                     appKey: &#39;{{ .Site.Params.valine.appKey }}&#39;,
                     notify: {{ .Site.Params.valine.notify }},
                     verify: {{ .Site.Params.valine.verify }},
                     avatar:&#39;{{ .Site.Params.valine.avatar }}&#39;,
                     placeholder: &#39;{{ .Site.Params.valine.placeholder }}&#39;,
                     visitor: {{ .Site.Params.valine.visitor }}
                 });
             &amp;lt;/script&amp;gt;
             {{- end }}
       {{ end }}
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实这样已经可以实现了。回到博客文章下方就可以看到已经显示出来了。当然前提是你已经配置好过Valine了，就是在Leancloud上注册等等。相关可以查看&lt;a href=&#34;https://valine.js.org/quickstart.html&#34; title=&#34;Valine官方文档&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Valine官方文档&lt;/a&gt;。
&lt;img src=&#34;https://ww1.sinaimg.cn/large/007i4MEmgy1g27o6azai0j30m30dzweo.jpg&#34; alt=&#34;Valine已经可以用了&#34; title=&#34;Valine已经可以用了&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;方法2-同时加入多个评论系统的配置&#34;&gt;方法2：同时加入多个评论系统的配置&lt;/h2&gt;

&lt;p&gt;这样是很多主题的做法，为了方便切换评论系统直接内置多个评论系统，这样做的话可以直接在站点配置文件里面修改即可使用。&lt;/p&gt;

&lt;h3 id=&#34;1-主题模板下新建comments-html&#34;&gt;1.主题模板下新建comments.html&lt;/h3&gt;

&lt;p&gt;在LeaveIt主题的/themes/LeaveIt/layouts/partials下新建comments.html模板（如有，则不需新建，直接修改内容即可。）在comments.html里面添加下面的内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if and .IsPage (ne .Params.comment false) -}}
  &amp;lt;!-- valine --&amp;gt;
  {{- if .Site.Params.valine.enable -}}
  &amp;lt;!-- id 将作为查询条件 --&amp;gt;
  &amp;lt;span id=&amp;quot;{{ .URL | relURL }}&amp;quot; class=&amp;quot;leancloud_visitors&amp;quot; data-flag-title=&amp;quot;{{ .Title }}&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;post-meta-item-text&amp;quot;&amp;gt;阅读量 &amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;leancloud-visitors-count&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;div id=&amp;quot;vcomments&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;script src=&amp;quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&#39;//unpkg.com/valine/dist/Valine.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    new Valine({
        el: &#39;#vcomments&#39; ,
        appId: &#39;{{ .Site.Params.valine.appId }}&#39;,
        appKey: &#39;{{ .Site.Params.valine.appKey }}&#39;,
        notify: {{ .Site.Params.valine.notify }}, 
        verify: {{ .Site.Params.valine.verify }}, 
        avatar:&#39;{{ .Site.Params.valine.avatar }}&#39;, 
        placeholder: &#39;{{ .Site.Params.valine.placeholder }}&#39;,
        visitor: &#39;{{ .Site.Params.valine.visitor }}&#39;
    });
  &amp;lt;/script&amp;gt;
  {{- end }}

  &amp;lt;!-- Disqus --&amp;gt;
  {{- if .Site.DisqusShortname -}}
    &amp;lt;div id=&amp;quot;disqus_thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    (function() {
      // Don&#39;t ever inject Disqus on localhost--it creates unwanted
      // discussions from &#39;localhost:1313&#39; on your Disqus account...
      if (window.location.hostname === &#39;localhost&#39;) return;
      var dsq = document.createElement(&#39;script&#39;); dsq.type = &#39;text/javascript&#39;; dsq.async = true;
      var disqus_shortname = &#39;{{ .Site.DisqusShortname }}&#39;;
      dsq.src = &#39;//&#39; + disqus_shortname + &#39;.disqus.com/embed.js&#39;;
      (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
    })();
    &amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
  {{- end -}}

  &amp;lt;!-- changyan --&amp;gt;
  {{- if and .Site.Params.changyanAppid .Site.Params.changyanAppkey -}}
    &amp;lt;div id=&amp;quot;SOHUCS&amp;quot; sid=&amp;quot;{{ .URL }}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    (function(){
      if (window.location.hostname === &#39;localhost&#39;) return;
      var appid = &#39;{{ .Site.Params.changyanAppid }}&#39;;
      var conf = &#39;{{ .Site.Params.changyanAppkey }}&#39;;
      var width = window.innerWidth || document.documentElement.clientWidth; 
      if (width &amp;lt; 960) {window.document.write(&#39;&amp;lt;script id=&amp;quot;changyan_mobile_js&amp;quot; charset=&amp;quot;utf-8&amp;quot; type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=&#39; + appid + &#39;&amp;amp;conf=&#39; + conf + &#39;&amp;quot;&amp;gt;&amp;lt;\/script&amp;gt;&#39;); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(&amp;quot;head&amp;quot;)[0]||document.head||document.documentElement;var b=document.createElement(&amp;quot;script&amp;quot;);b.setAttribute(&amp;quot;type&amp;quot;,&amp;quot;text/javascript&amp;quot;);b.setAttribute(&amp;quot;charset&amp;quot;,&amp;quot;UTF-8&amp;quot;);b.setAttribute(&amp;quot;src&amp;quot;,d);if(typeof a===&amp;quot;function&amp;quot;){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===&amp;quot;loaded&amp;quot;||e===&amp;quot;complete&amp;quot;){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(&amp;quot;https://changyan.sohu.com/upload/changyan.js&amp;quot;,function(){window.changyan.api.config({appid:appid,conf:conf})}); }
    })();
    &amp;lt;/script&amp;gt;
  {{- end -}}

  &amp;lt;!-- LiveRe --&amp;gt;
  {{- if .Site.Params.livereUID -}}
    &amp;lt;div id=&amp;quot;lv-container&amp;quot; data-id=&amp;quot;city&amp;quot; data-uid=&amp;quot;{{ .Site.Params.livereUID }}&amp;quot;&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      (function(d, s) {
        var j, e = d.getElementsByTagName(s)[0];
        if (typeof LivereTower === &#39;function&#39;) { return; }
        j = d.createElement(s);
        j.src = &#39;https://cdn-city.livere.com/js/embed.dist.js&#39;;
        j.async = true;
        e.parentNode.insertBefore(j, e);
      })(document, &#39;script&#39;);
    &amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;Please enable JavaScript to view the comments powered by &amp;lt;a href=&amp;quot;https://livere.com/&amp;quot;&amp;gt;LiveRe.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
  {{- end -}}

  &amp;lt;!-- gitment --&amp;gt;
  {{- if .Site.Params.gitment.owner -}}
    &amp;lt;div id=&amp;quot;comments-gitment&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/gitment@0.0.3/style/default.min.css&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/gitment@0.0.3/dist/gitment.browser.min.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      var gitment = new Gitment({
        id: &#39;{{ .Date }}&#39;,
        title: &#39;{{ .Title }}&#39;,
        link: decodeURI(location.href),
        desc: &#39;{{ .Summary }}&#39;,
        owner: &#39;{{ .Site.Params.gitment.owner }}&#39;,
        repo: &#39;{{ .Site.Params.gitment.repo }}&#39;,
        oauth: {
          client_id: &#39;{{ .Site.Params.gitment.clientId }}&#39;,
          client_secret: &#39;{{ .Site.Params.gitment.clientSecret }}&#39;
        }
      });
      gitment.render(&#39;comments-gitment&#39;);
    &amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;https://github.com/imsun/gitment&amp;quot;&amp;gt;comments powered by gitment.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
  {{- end -}}

  &amp;lt;!-- gitalk --&amp;gt;
  {{- if .Site.Params.gitalk.owner -}}
    &amp;lt;div id=&amp;quot;gitalk-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      var gitalk = new Gitalk({
        id: &#39;{{ .Date }}&#39;,
        title: &#39;{{ .Title }}&#39;,
        clientID: &#39;{{ .Site.Params.gitalk.clientId }}&#39;,
        clientSecret: &#39;{{ .Site.Params.gitalk.clientSecret }}&#39;,
        repo: &#39;{{ .Site.Params.gitalk.repo }}&#39;,
        owner: &#39;{{ .Site.Params.gitalk.owner }}&#39;,
        admin: [&#39;{{ .Site.Params.gitalk.owner }}&#39;],
        body: decodeURI(location.href)
      });
      gitalk.render(&#39;gitalk-container&#39;);
    &amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;https://github.com/gitalk/gitalk&amp;quot;&amp;gt;comments powered by gitalk.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
  {{- end }}

{{- end }}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-在文章页模板中调用上面新建的评论模板&#34;&gt;2.在文章页模板中调用上面新建的评论模板&lt;/h3&gt;

&lt;p&gt;例如本站用的LeaveIt主题是在&lt;code&gt;layouts/_default/single.html&lt;/code&gt; 找到第97行的&lt;code&gt;&amp;lt;div class=&amp;quot;post-comment&amp;quot;&amp;gt;&lt;/code&gt; 代码块中的判断Disqus略称后的 &lt;code&gt;{{ end }}&lt;/code&gt;后面，插入调用代码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ partial &amp;quot;comments.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实就是方法1的第二步，只是方法一是直接将评论代码加到文章页模板中，而这个是将评论代码统统放在comments.html模板下，再在文章页模板通过代码调用这个comments.html，只要站点配置文件config.toml里面存在相关开关配置，则评论系统就会被正常调用。&lt;/p&gt;

&lt;p&gt;方法二参考的是其他的主题Even等，Valine评论系统是可以正常被调用，但是其他的没有测试过。&lt;/p&gt;

&lt;h2 id=&#34;参考来源&#34;&gt;参考来源&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.smslit.top/2018/07/08/hugo-valine/&#34; title=&#34;hugo博客添加评论系统Valine&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;hugo博客添加评论系统Valine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://valine.js.org/quickstart.html&#34; title=&#34;Valine官方文档&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Valine官方文档&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>手滑导致设置git remote仓库错误 如何修改远程仓库地址配置</title>
      <link>https://huaien.co/technology/change-git-remote-config/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/change-git-remote-config/</guid>
      <description>&lt;p&gt;本文记录了如何修改git remote配置的远程仓库地址。在不小心设置错误git remote地址时可以用这个方法修改为正确的远程仓库地址配置。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;在同步github仓库的时候手滑了导致设置的git remote地址出错了。然后又添加了一下提示错误。
记录一下如何修改&lt;/p&gt;

&lt;p&gt;在指定远程仓库的时候输入错误导致设置了错误的远程仓库，直接重新用下面的命令会提示错误&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add origin git@github.com:github帐号名/仓库名.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提示已经存在的出错信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fatal: remote origin already exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解决办法&#34;&gt;解决办法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 删除错误的远程仓库配置
$ git remote rm origin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# 重新输入正确的远程仓库配置
$ git remote add origin git@github.com:github帐号名/仓库名.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就不会提示已经存在的错误了&lt;/p&gt;

&lt;p&gt;但是如果输入&lt;code&gt;$ git remote rm origin&lt;/code&gt; 还是报错&lt;code&gt;error: Could not remove config section &#39;remote.origin&#39;.&lt;/code&gt;的话，就需要修改gitconfig文件的内容。&lt;/p&gt;

&lt;p&gt;到你的github的安装路径下的etc文件夹，找到一个名为gitconfig的文件，打开它把里面的[remote &amp;ldquo;origin&amp;rdquo;]那一行删除就可以了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;参考来源：&lt;a href=&#34;https://blog.csdn.net/dengjianqiang2011/article/details/9260435&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/dengjianqiang2011/article/details/9260435&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Disqus提示无法加载的解决办法</title>
      <link>https://huaien.co/technology/disqus-error-to-load/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/disqus-error-to-load/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://ae01.alicdn.com/kf/HTB1c6O0X6vuK1Rjy0Faq6x2aVXaB.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;错误提示&#34;&gt;错误提示：&lt;/h3&gt;

&lt;p&gt;Disqus 无法加载。如果您是管理员，请参阅故障排除指南。&lt;/p&gt;

&lt;p&gt;We were unable to load Disqus. If you are a moderator please see our troubleshooting guide.&lt;/p&gt;

&lt;h3 id=&#34;解决方法&#34;&gt;解决方法：&lt;/h3&gt;

&lt;p&gt;在hexo中的根目录下的_config.yml文件中，这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# URL
## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;
url: https://www.nihoncard.com
root: /
permalink: :category/:title.html
permalink_defaults:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;url: 处需要设置为带http的完整的链接。我原来写的是&lt;code&gt;/&lt;/code&gt;就会出现以上错误。改了之后就好了。&lt;/p&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考：&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/edcc22f6cf33&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.jianshu.com/p/edcc22f6cf33&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何申请成为Cloudflare Partner合作伙伴</title>
      <link>https://huaien.co/internet/become-cloudflare-partner/</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/internet/become-cloudflare-partner/</guid>
      <description>&lt;h2 id=&#34;什么是cloudflare&#34;&gt;什么是CloudFlare&lt;/h2&gt;

&lt;p&gt;CloudFlare想必大家还是挺熟悉的，作为世界最大的CDN服务提供商之一，CloudFlare不但提供了免费的域名DNS解析服务，包括了HTTPS加密的免费的CDN服务，还有吊炸天的1.1.1.1 1.0.0.1的公共DNS服务。而且解析速度非常之快，我也将自己10个左右的域名托管在CloudFlare的DNS解析服务上。试过如果添加解析记录或者修改解析记录后，几乎即时生效，虽然说这样有好有坏，但是反应速度之快，真的让我吓一跳。&lt;/p&gt;

&lt;h2 id=&#34;什么是cloudflare-partner&#34;&gt;什么是CloudFlare Partner&lt;/h2&gt;

&lt;p&gt;上面提到了CloudFlare提供域名解析服务和CDN服务等，但是如果你使用的是免费套餐，必须把域名的NS服务器改为CloudFlare提供的地址，虽然大部分DNS解析服务商都是如此，但是有很多人不愿意修改DNS服务器，比如用了DNSPOD的智能解析服务，如果用NS解析来使用CloudFlare的话，就无法使用DNSPOD的解析服务。但是通过CloudFlare Partner合作伙伴计划，我们可以通过另一种方法来使用CloudFlare的DNS解析和CDN服务。&lt;/p&gt;

&lt;p&gt;这就是通过解析cname记录来使用CloudFlare的服务。这样可以使用他们提供的SSL证书来开启HTTPS和CDN服务。
CloudFlare Partner其实就是CloudFlare为了拓展用户提供的合作分销计划。旨在为开发者或者主机提供商提供便利的API服务以拓展用户。用户不需要登录CloudFlare官网来管理域名解析，可以在WHMCS、Cpanel等面板中使用集成的Cloudflare CDN加速服务。&lt;/p&gt;

&lt;h2 id=&#34;申请cloudflare-partner&#34;&gt;申请CloudFlare Partner&lt;/h2&gt;

&lt;h3 id=&#34;填写信息&#34;&gt;填写信息&lt;/h3&gt;

&lt;p&gt;申请CloudFlare Partner页面：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/partners/become-a-partner/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.cloudflare.com/partners/become-a-partner/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;打开后界面如下&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fw4bjkwemzj310d0h5768&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fw4bjkwemzj310d0h5768&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自上而下需要填入的信息为
- 公司名称 （这个你可以只要域名名字，比如abc.com的话写abc）
- ==业务类目== *（这里我第一次选择了Web Designer/Developer被拒绝，回信说合作伙伴计划是提供给主机提供商的服务。）
- 网址 （你自己的域名如&lt;a href=&#34;https://abc.com）&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://abc.com）&lt;/a&gt;
- 名字
- 姓氏
- 职位 （这个虽然为非必填，但是我填了申请成功）
- ==联系邮箱== *（这里为重点，需要使用企业邮箱，没有的话也可以用域名邮箱。比如QQ的域名邮箱，申请方便，可以接收到信。另外邮箱格式最好为admin@abc.com这样的，虽然我用的是w@abc.com这样的）
- 联系电话 （格式为+8613912345678）
- 通过什么途径知道的 （我选择的Customer request，客户要求）
- 备注 （可以放空）&lt;/p&gt;

&lt;p&gt;最后我填写的资料差不多是下面这样的
&lt;a href=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fw4bna1j9qj30cd0em74w&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fw4bna1j9qj30cd0em74w&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是我前两次申请失败了。第一次因为选择业务类目选择的网页设计者/开发者，第二次还是用一样信息只是业务类目改为VPS/服务器提供商，估计是留底了。&lt;/p&gt;

&lt;p&gt;点击提交后你的邮箱就会收到邮件
&amp;gt; XXX &amp;ndash; [Cloudflare]: Application Received
&amp;gt; Dear XXX,
&amp;gt;
&amp;gt; Thank you for applying to Cloudflare&amp;rsquo;s Certified Partner Program. Your application has been submitted. We review all applications and respond shortly.
&amp;gt;
&amp;gt; Cloudflare offers many benefits to you as a service provider:
&amp;gt; *   Reduced server load
&amp;gt; *   Bandwidth savings
&amp;gt; *   Fewer customer support tickets
&amp;gt; *   Mitigation of DDoS attacks
&amp;gt; *   IPv4 / IPv6 gateway
&amp;gt;
&amp;gt; On average, a website on Cloudflare:
&amp;gt; *   Loads twice as fast, on an international CDN
&amp;gt; *   Uses 60% less bandwidth
&amp;gt; *   Sees 65% fewer requests
&amp;gt; *   Is way more secure
&amp;gt;
&amp;gt; Thank you for your interest in Cloudflare.
&amp;gt;
&amp;gt; Regards,
&amp;gt; The Cloudflare Team&lt;/p&gt;

&lt;p&gt;第一次申请不到五个小时就回信说拒绝了
&amp;gt; XXX &amp;ndash; [Cloudflare] Application Declined
&amp;gt;
&amp;gt; Dear XXX,
&amp;gt;
&amp;gt; Thank you for your interest in Cloudflare&amp;rsquo;s Certified Hosting Provider program. Unfortunately at this time, Cloudflare has declined your application to become a partner in this program.
&amp;gt;
&amp;gt; The program is created for hosting providers offering commercial hosting only. I&amp;rsquo;d like to encourage you to sign up for Cloudflare directly, take a look at our plans here: www.cloudflare.com/plans
&amp;gt;
&amp;gt; We apologize for any inconvenience that this may cause. If you feel that this decision was reached in error, please contact us at partners@cloudflare.com.
&amp;gt;
&amp;gt; Regards,
&amp;gt; The Cloudflare Team&lt;/p&gt;

&lt;p&gt;第二次只是修改了业务类目为VPS还是拒绝，但是时间花了将近5天才回复。&lt;/p&gt;

&lt;p&gt;拒绝的原因还是一样，估计是我这个域名没有写有关主机相关的内容吧，后来看到其他人说可以通过反代一个VPS博客就可以，于是就换了一个com域名反代了一个主机博客。申请后大概过了一天回信通过。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Cloudflare] Partnership Application Approved for XXX

Congratulations - you&#39;ve been approved for Cloudflare&#39;s Certified Partner Program!

Follow these four steps to get up and running:


Step 1: Log into the Cloudflare Partner Portal

Set Your Password: https://partners.cloudflare.com/reset-password/XXXX

In the partner portal, you will be able to manage your and your customers&#39; services with Cloudflare as well as use it as a central source of news and information about Cloudflare.


Step 2: Integrate your control panels, billing system, or online store

To make it easy for your customers to sign up, Cloudflare offers several options to make this easy. We have pre-created plugins for popular control panel systems like cPanel, Parallels Plesk Panel, Interworx, and ISPsystem. For other systems or for custom systems, Cloudflare offers a documented Host API with which you can integrate. 

Plugin downloads, your Host API access key, and many other resources can be found in the Cloudflare Partner Portal at: https://partners.cloudflare.com


Step 3: Preserve Original Visitor IP in Log Files

All requests to a Cloudflare protected website will come from the Cloudflare IP address ranges: http://www.cloudflare.com/ips

DO NOT THROTTLE OR RATE-LIMIT these IP addresses, or your customers&#39; website visitors will see a &amp;quot;Website Offline&amp;quot; page.

Cloudflare passes the original visitor IP address in the header of every request. To retrieve the original visitor IP from the header, install the appropriate software on your server, you can find download links in the Cloudflare Partner Portal at https://partners.cloudflare.com. (Note: If you use the cPanel plugin and are running Apache, the visitor IP software will automatically be installed).


Step 4: Enable Cloudflare for Three Test Websites

To ensure that Cloudflare was properly installed, enable Cloudflare for three test websites from your control panel.

To check if a website is on Cloudflare, use Terminal. Open Terminal, and enter the following dig command.

    dig www.mydomain.com

Output without Cloudflare-enabled:

    www.mydomain.com   10782   IN   CNAME      www.mydomain.com

Output with Cloudflare-enabled:

    www.mydomain.com    10782  IN           CNAME   www.mydomain.com.cdn.cloudflare.net.

If you see &#39;.cdn.cloudflare.net&#39; at the end, then Cloudflare is enabled.


Understanding How Cloudflare Integrates:
- The plugins and API provision Cloudflare via delegating CNAMEs. Your customers continue to point their domain to your authoritative DNS servers. You do the delegation for them via the plugins or API. Note: this is different than websites that sign up at cloudflare.com directly.
- Since Cloudflare works through CNAMEs, Cloudflare cannot be enabled on the root domain, which is an A record. If your customer wants to use Cloudflare to accelerate and protect traffic going to the root domain, they must add a redirect in the .htaccess file to &#39;www&#39;.
- As a reference, here is one example:

    RewriteEngine On
    # Rewrite added for CloudflareInstall - mysite.com
    # Wednesday 25th of August 2010 04:59:42 AM
    RewriteCond %{HTTP_HOST} ^mysite.com$ [NC]
    RewriteCond %{SERVER_PORT} ^80$
    RewriteRule ^(.*)$ http://www.mysite.com/$1 [R=301,L]


Support Options:
- Partner Technical Support: submit a question here: https://support.cloudflare.com/anonymous_requests/new
    (Note: select &amp;quot;Hosting Partners - Certified&amp;quot; in the dropdown menu)
- Other: email partners@cloudflare.com


Once you have installed Cloudflare and enabled three test websites, within 24 hours you will receive an email outlining next steps and a Launch Plan. We look forward to getting you up and running as a Certified Partner.


Thanks!
The Cloudflare Team
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;注意点&#34;&gt;注意点&lt;/h3&gt;

&lt;p&gt;看了一些人的申请攻略，总结了以下几点
1. 申请表填写的内容全部为英文，用中文填写会导致对方看不懂而拒绝申请。
2. 业务类型选择VPS/服务器
3. 内容要和VPS/服务器有关，如果你是主机推介博客，那就可以了，没有的话可以把你的域名反代一个主机推介博客。
4. 邮箱需要企业邮箱。就是name@yourdomainname.com这种格式的。有人说用国内企业邮箱会导致收不到信，国内企业邮箱服务的确有这种可能信，但是我这次用的是QQ域名邮箱和腾讯企业邮箱都可以正常接收到邮件。
5. 关于申请理由，可填可不填，有些人说可以填写国内网络登录CloudFlare不稳定，因为客户需求，所以申请。但是我这次没填写也通过了。&lt;/p&gt;

&lt;h2 id=&#34;申请通过后的步骤&#34;&gt;申请通过后的步骤&lt;/h2&gt;

&lt;p&gt;通过邮件通知你申请被批准后，需要留意邮件中的链接，
&amp;gt; Step 1: Log into the Cloudflare Partner Portal
&amp;gt;
&amp;gt; Set Your Password: &lt;a href=&#34;https://partners.cloudflare.com/reset-password/XXXX&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://partners.cloudflare.com/reset-password/XXXX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;第一步就是让你点击链接进去修改密码。
接着登录进去后会让你填写问卷调查。&lt;/p&gt;

&lt;p&gt;填完点击下一步，就会显示你的CloudFlare Partner API，再返回到主页，你就可以看到Cloudflare Partner后台了。&lt;/p&gt;

&lt;h2 id=&#34;使用cloudflare-partner部署域名&#34;&gt;使用Cloudflare Partner部署域名&lt;/h2&gt;

&lt;p&gt;有几种办法来通过Cloudflare Partner来部署解析域名。&lt;/p&gt;

&lt;h3 id=&#34;自用的情况&#34;&gt;自用的情况&lt;/h3&gt;

&lt;p&gt;通过Cloudflare Partner CLI来管理
&lt;a href=&#34;https://github.com/fffonion/cloudflare-partner-cli&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/fffonion/cloudflare-partner-cli&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用他人搭建的面板&#34;&gt;使用他人搭建的面板&lt;/h3&gt;

&lt;p&gt;我也用Cloudflare-CNAME-Setup搭建了一个&lt;br /&gt;
&lt;a href=&#34;https://cl.guosao.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://cl.guosao.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;开源代码搭建面板&#34;&gt;开源代码搭建面板&lt;/h3&gt;

&lt;p&gt;WeiUZ CloudFlare Partners PHP版本
&lt;a href=&#34;https://github.com/mphreys/WeiUZ&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/mphreys/WeiUZ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SonicBreaker
&lt;a href=&#34;https://github.com/AxelPanda/SonicBreaker/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/AxelPanda/SonicBreaker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CFPMP
&lt;a href=&#34;https://github.com/Netrvin/CFPMP&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/Netrvin/CFPMP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CloudFlare partner website with python and flask
&lt;a href=&#34;https://github.com/luodaoyi/CloudFlarePartner&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/luodaoyi/CloudFlarePartner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cloudflare Partner Panel
&lt;a href=&#34;https://github.com/ZE3kr/Cloudflare-CNAME-Setup&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/ZE3kr/Cloudflare-CNAME-Setup&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://wzfou.com/cloudflare-partner/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://wzfou.com/cloudflare-partner/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决Linux系统SSH终端显示中文乱码以centos为例</title>
      <link>https://huaien.co/technology/linux-os-ssh-show-chinese/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/linux-os-ssh-show-chinese/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fvntln8qacj30gj09sgmt&#34; alt=&#34;&#34; /&gt;
如果没有设置好编码，在SSH客户端连接Linux服务器的时候就是像上面那样显示效果。不过经过设置，可以正常显示中文。&lt;/p&gt;

&lt;h2 id=&#34;查看当前系统编码设置&#34;&gt;查看当前系统编码设置&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# echo $LANG
C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回的值为C，可以知道当前的系统语言编码设置为C&lt;/p&gt;

&lt;h2 id=&#34;查看当前系统的中文支持&#34;&gt;查看当前系统的中文支持&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# locale -a | grep zh_CN
zh_CN
zh_CN.gb18030
zh_CN.gb2312
zh_CN.gbk
zh_CN.utf8

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上列出的为当前系统可用中文字符集&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;vim 只能正确识别列表中的中文编码文件，如需识别其他编码类型的中文文件，则需要做系统升级。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;修改linux系统的编码文件&#34;&gt;修改Linux系统的编码文件&lt;/h2&gt;

&lt;p&gt;以下操作在root权限下操作。&lt;/p&gt;

&lt;h3 id=&#34;临时生效-重启失效&#34;&gt;临时生效，重启失效&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# export LANG=&amp;quot;zh_CN.UTF-8&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看编码设置是否变更为zh_CN.UTF-8&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# echo $LANG
zh_CN.UTF-8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;永久生效&#34;&gt;永久生效&lt;/h3&gt;

&lt;p&gt;只需要编辑/etc/sysconfig/i18n文件就好了&lt;/p&gt;

&lt;p&gt;用vi编辑&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/sysconfig/i18n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在原来的内容前加上“#”注释掉&lt;/p&gt;

&lt;p&gt;并添加一行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LANG=&amp;quot;zh_CN.UTF-8&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fvntwapar7j30gj09sdg3&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;按esc退出insert模式&lt;/p&gt;

&lt;p&gt;底行模式下输入&lt;code&gt;:wq&lt;/code&gt;保存退出&lt;/p&gt;

&lt;p&gt;用下面其中一种命令使修改生效&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source /etc/sysconfig/i18n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;. /etc/sysconfig/i18n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;附带网上几个版本的i18n配置文件&lt;/p&gt;

&lt;p&gt;这个版本最普遍，当时可能是我的客户端没有找到这个编码导致还是有些中文无法显示。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LANG=&amp;quot;zh_CN.GB18030&amp;quot;
SUPPORTED=&amp;quot;zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:en:zh_CN.GB18030&amp;quot;
SYSFONT=&amp;quot;latarcyrheb-sun16&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面这个可以完全显示。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LANG=&amp;quot;zh_CN.UTF-8&amp;quot;  
SUPPORTED=&amp;quot;zh_CN.UTF-8:zh_CN:zh&amp;quot;  
SYSFONT=&amp;quot;latarcyrheb-sun16&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;修改putty客户端的编码设置&#34;&gt;修改Putty客户端的编码设置&lt;/h2&gt;

&lt;p&gt;其他的客户端也需要设置，方法差不多。&lt;/p&gt;

&lt;p&gt;putty设置&lt;/p&gt;

&lt;p&gt;左侧设置类别的Window-Appearance，右侧的Font settings的Change按钮&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fvnt7nzrshj30cy0argmv&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在字体设置中字体选择带有中文的字体如下图选择楷体Kaiti ，在下方的文字设置选择中文。OK确定&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fvnt9pnoisj30c90fpjsa&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;设置类别的Windows-Translation，右侧如图选择UTF-8编码。这里要选择之前设置的服务器配置文件设置的编码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fvntbuqak3j30cy0ap0u2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上就是putty客户端的编码设置。&lt;/p&gt;

&lt;h2 id=&#34;正常显示中文效果&#34;&gt;正常显示中文效果&lt;/h2&gt;

&lt;p&gt;经过上面一系列的设置，就可以在SSH终端中正常显示中文了
&lt;img src=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fvnteux1qej30gj09s756&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;学到的几个linux命令&#34;&gt;学到的几个Linux命令&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#全局系统环境变量配置文件
echo &#39;export LANG=&amp;quot;ZH_CN.GB18030&amp;quot;&#39; &amp;gt;&amp;gt;/etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#使配置生效
source /etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#查看结果
echo $LANG
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;更改脚本字符集&#34;&gt;更改脚本字符集&lt;/h2&gt;

&lt;p&gt;有时候脚本内容出现中文乱码，也可以在脚本里面更改字符集&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
　export LANG=&amp;quot;ZH_CN.GB18030&amp;quot;
　（脚本内容）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;批量文件转码命令&#34;&gt;批量文件转码命令&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;iconv -c -f gbk -t utf-8 $data_path/$item_uv
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;最后付上原centos默认编码配置文件内容&lt;/p&gt;

&lt;p&gt;位置&lt;/p&gt;

&lt;p&gt;/etc/sysconfig/i18n&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LANG=C
SYSFONT=latarcyrheb-sun16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考自&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/wzb56_earl/article/details/24046995&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/wzb56_earl/article/details/24046995&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/wusuopuBUPT/article/details/50947243&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/wusuopuBUPT/article/details/50947243&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>宝塔面板无法启动pure-ftpd服务的解决办法</title>
      <link>https://huaien.co/technology/bt-panel-cannot-active-pure-ftpd/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/bt-panel-cannot-active-pure-ftpd/</guid>
      <description>&lt;p&gt;宝塔面板安装pure-ftpd后发现并没有启动，多次手动重启还是显示关闭状态，重装好几次也无法启动。&lt;/p&gt;

&lt;p&gt;进入ssh
输入以下命令 看是否21端口给其他软件占用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsof -i :21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果结果是下面这样就是系统自带的ftp软件给占用了21端口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@izcupa3t172j1wz ~]# lsof -i :21
COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
vsftpd  855 root    3u  IPv6  15453      0t0  TCP *:ftp (LISTEN)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入以下命令启动即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pkill -9 vsftpd
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;service pure-ftpd start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以用下面的命令启动pure-ftpd&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/pure-ftpd start

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://www.bt.cn/bbs/thread-2746-1-1.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.bt.cn/bbs/thread-2746-1-1.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决wordpress后台安装插件时提示需要ftp账号和密码</title>
      <link>https://huaien.co/technology/wordpress-install-plugin-show-ftp-info/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/wordpress-install-plugin-show-ftp-info/</guid>
      <description>&lt;p&gt;在wordpress安装之后，想要安装一个插件来用，结果弹出提示输入ftp账户与密码。如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/005YhI8igy1fvmtky7cxqj30ch0dzaab.jpg&#34; alt=&#34;弹出提示输入ftp账户与密码&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后搜索了一下网上的解决方案，所需要更改wordpress文件夹的权限，命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chown -R www  /home/wwwroot/wordpress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个命令是将wordpress目录下的所有文件与子目录进行相同的拥有者变更为www(即以递回的方式逐个变更)&lt;/p&gt;

&lt;p&gt;后面的&lt;code&gt;/home/wwwroot/wordpress&lt;/code&gt;路径是自己安装wordpress的文件夹。&lt;/p&gt;

&lt;p&gt;如果这样操作报一下错误的话&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chown: changing ownership of `/home/wwwroot/wordpress/.user.ini&#39;: Operation not permitted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只需要如下更改之后就ok了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chown -R www  /home/wwwroot/hi/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只需要在文件路径之后再加一个/* 。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本文来自：&lt;a href=&#34;https://blog.csdn.net/u014182411/article/details/78127663?utm_source=copy&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/u014182411/article/details/78127663?utm_source=copy&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>宝塔面板忘记密码如何找回宝塔面板账户登录密码</title>
      <link>https://huaien.co/technology/bt-panel-get-password-back/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/bt-panel-get-password-back/</guid>
      <description>&lt;h2 id=&#34;找回密码&#34;&gt;找回密码&lt;/h2&gt;

&lt;p&gt;如果只是忘记了密码，还记得账号&lt;/p&gt;

&lt;p&gt;可以输入以下命令回车找回密码（早期版本默认账号admin）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat /www/server/panel/default.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是执行命令实例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@woo2:~# cat /www/server/panel/default.pl
c58d3170
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回的c58d3170就是密码。&lt;/p&gt;

&lt;h2 id=&#34;找回用户名&#34;&gt;找回用户名&lt;/h2&gt;

&lt;p&gt;如果你也不记得账号，可以通过下面的命令来重置密码并得到默认账户。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /www/server/panel &amp;amp;&amp;amp; python tools.pyc panel newpassword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;newpassword请改成你要修改的密码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@woo2:~# cd /www/server/panel &amp;amp;&amp;amp; python tools.pyc panel newpassword
rwlfzj3w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到返回的rwlfzj3w就是你的账号，你可以用这个账号和新密码来登录面板，登录进去后可以去面板设置修改账号密码。&lt;/p&gt;

&lt;p&gt;原文地址：&lt;a href=&#34;http://www.bt.cn/bbs/thread-1172-1-1.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://www.bt.cn/bbs/thread-1172-1-1.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>宝塔启动nginx服务失败提示failed (98:Address already in use)</title>
      <link>https://huaien.co/technology/bt-panel-failed-to-start-nginx/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/bt-panel-failed-to-start-nginx/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;发现宝塔的nginx没有在运行，于是在宝塔面板上手动重启，但是提示失败，失败信息是下面那样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;警告消息：&lt;/p&gt;

&lt;p&gt;nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)
nginx: [emerg] still could not bind()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;原因是nginx服务被卡死，导致80端口被占用，地址已经被使用。&lt;/p&gt;

&lt;p&gt;解决这一问题的办法，我们得找到占用80端口的服务进程，并结束它。&lt;/p&gt;

&lt;h2 id=&#34;解决办法&#34;&gt;解决办法&lt;/h2&gt;

&lt;p&gt;用 &lt;code&gt;netstat -ntpl&lt;/code&gt; 来查看端口使用情况&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@woo2:/www/server/panel# netstat -ntpl
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6822/nginx.conf
tcp        0      0 0.0.0.0:21              0.0.0.0:*               LISTEN      6672/pure-ftpd (SER
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1769/sshd
tcp        0      0 0.0.0.0:888             0.0.0.0:*               LISTEN      6822/nginx.conf
tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      20242/python
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1943/sendmail: MTA:
tcp        0      0 127.0.0.1:587           0.0.0.0:*               LISTEN      1943/sendmail: MTA:
tcp6       0      0 :::21                   :::*                    LISTEN      6672/pure-ftpd (SER
tcp6       0      0 :::22                   :::*                    LISTEN      1769/sshd
tcp6       0      0 :::3306                 :::*                    LISTEN      19710/mysqld

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到进程pid 6822占用了80的端口，导致nginx无法启动。&lt;/p&gt;

&lt;p&gt;我们只要将6822进程结束就行了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@woo2:/www/server/panel# kill 6822

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结束后再次查看端口使用情况&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@woo2:/www/server/panel# netstat -ntpl
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:21              0.0.0.0:*               LISTEN      6672/pure-ftpd (SER
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1769/sshd
tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      20242/python
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1943/sendmail: MTA:
tcp        0      0 127.0.0.1:587           0.0.0.0:*               LISTEN      1943/sendmail: MTA:
tcp6       0      0 :::21                   :::*                    LISTEN      6672/pure-ftpd (SER
tcp6       0      0 :::22                   :::*                    LISTEN      1769/sshd
tcp6       0      0 :::3306                 :::*                    LISTEN      19710/mysqld

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现已经没有80端口在使用中了。&lt;/p&gt;

&lt;p&gt;然后就可以在宝塔面板上或者使用
&lt;code&gt;service nginx start&lt;/code&gt;命令来启动nginx服务了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git生成 SSH 公钥添加到GitHub和Coding.net</title>
      <link>https://huaien.co/technology/ssh-key-generator-git/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/ssh-key-generator-git/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。例如我们在使用GitHub Pages来托管博客，或者将代码推到GitHub或者Coding上的话需要先生成一个SSH并填入到托管平台的设置中来授权。&lt;/p&gt;

&lt;h2 id=&#34;生成&#34;&gt;生成&lt;/h2&gt;

&lt;p&gt;生成公钥的过程在所有操作系统上都差不多。 首先先确认一下是否已经有一个公钥了。SSH 公钥默认储存在账户的主目录下的&lt;code&gt;~/.ssh&lt;/code&gt;目录。进去看看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh
$ ls
authorized_keys2  id_dsa       known_hosts
config            id_dsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关键是看有没有用 something 和 something.pub 来命名的一对文件，这个 something 通常就是 &lt;code&gt;id_dsa&lt;/code&gt; 或 &lt;code&gt;id_rsa&lt;/code&gt;。有 &lt;code&gt;.pub&lt;/code&gt; 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 &lt;code&gt;ssh-keygen&lt;/code&gt; 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/schacon/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /Users/schacon/.ssh/id_rsa.
Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.
The key fingerprint is:
43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它先要求你确认保存公钥的位置（&lt;code&gt;.ssh/id_rsa&lt;/code&gt;），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。&lt;/p&gt;

&lt;p&gt;现在，所有做过这一步的用户都得把它们的公钥给你或者 Git 服务器的管理员（假设 SSH 服务被设定为使用公钥机制）。他们只需要复制 &lt;code&gt;.pub&lt;/code&gt; 文件的内容然后发邮件给管理员。&lt;/p&gt;

&lt;h2 id=&#34;得到公钥&#34;&gt;得到公钥&lt;/h2&gt;

&lt;p&gt;公钥的样子大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q== schacon@agadorlaptop.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将上面得到的公钥内容填到你要授权的托管平台的SSH钥设置中就好了~&lt;/p&gt;

&lt;p&gt;关于在多个操作系统上设立相同 SSH 公钥的教程，可以查阅 GitHub 上有关 SSH 公钥的向导：&lt;a href=&#34;http://github.com/guides/providing-your-ssh-key。&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://github.com/guides/providing-your-ssh-key。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;来源：&lt;a href=&#34;https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;3 服务器上的 Git - 生成 SSH 公钥&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>宝塔面板安装Flarum轻论坛程序时提示The PHP extension &#39;fileinfo&#39; is required</title>
      <link>https://huaien.co/technology/bt-panel-install-fileinfo-for-php/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://huaien.co/technology/bt-panel-install-fileinfo-for-php/</guid>
      <description>&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;宝塔面板默认并没有安装fileinfo模块，可按以下教程安装：&lt;/p&gt;

&lt;p&gt;注意：以下教程中56为PHP版本，请替换成您要安装此扩展的PHP版本，Flarum轻论坛程序最低要求PHP5.6+&lt;/p&gt;

&lt;h2 id=&#34;解决过程&#34;&gt;解决过程&lt;/h2&gt;

&lt;h3 id=&#34;进入对应版本的fileinfo扩展源码目录&#34;&gt;进入对应版本的fileinfo扩展源码目录&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cd /www/server/php/56/src/ext/fileinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;初始化扩展安装&#34;&gt;初始化扩展安装&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/www/server/php/56/bin/phpize
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;生成编译配置&#34;&gt;生成编译配置&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./configure --with-php-config=/www/server/php/56/bin/php-config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;编译并安装扩展&#34;&gt;编译并安装扩展&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;写入配置文件&#34;&gt;写入配置文件&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;extension=fileinfo.so&#39; &amp;gt;&amp;gt; /www/server/php/56/etc/php.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;重载php配置&#34;&gt;重载PHP配置&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;service php-fpm-56 reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>